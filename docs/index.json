[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Model/_ajvWrapper.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\n/**\n * @private\n */\nimport Ajv from \"ajv\";\nimport {default as ajvOptions} from \"../ajv-options\";\nimport {Model} from \"./index\";\nimport addFormats from \"ajv-formats\";\nimport {getSchemaID} from \"./utils\";\nimport {_ajvRef} from \"./_references\";\n\nconst _validators = new WeakMap();\n\n/**\n * backreferences object tree for top-down evaluation\n * @param path\n * @param data\n * @param owner\n * @returns {any}\n * @private\n */\nconst _preconstruct = (path, data, owner) => {\n    const _p = path.replace(/^[a-z0-9_]*#+/i, \"\").split(\"/\");\n    let _o = Object.assign({}, data);\n    while(_p.length > 0) {\n        _p.pop();\n        try {\n            _o = Object.assign({}, owner.getPath(_p.join(\".\")), _o);\n        } catch (e) {\n            _p.splice(0, _p.length-1);\n            throw e;\n        }\n    }\n\n    return _o;\n};\n\n/**\n *\n * @param inst\n * @param schemas\n * @param opts\n * @returns {ajv | ajv.Ajv}\n */\nconst createAjv = (inst, schemas, opts) => {\n    const _ajv = new Ajv(opts);\n    addFormats(_ajv);\n\n    if (schemas) {\n        if (schemas.hasOwnProperty(\"meta\")) {\n            if (Array.isArray(schemas.meta)) {\n                schemas.meta.forEach((meta) => {\n                    _ajv.addMetaSchema(meta);\n                });\n            }\n        }\n\n        // todo: review performance of addSchema\n        if (schemas.hasOwnProperty(\"schemas\")) {\n            let schemaID;\n            if (Array.isArray(schemas.schemas)) {\n                schemas.schemas.forEach((schema) => {\n                    schemaID = getSchemaID(schema);\n                    _ajv.addSchema(schema, schemaID);\n                });\n            } else {\n                if ((typeof schemas.schemas) === \"string\") {\n                    schemaID = getSchemaID(schemas.schema);\n                    _ajv.addSchema(schemas.schemas, schemaID);\n                }\n            }\n\n            if (schemaID) {\n                inst.path = schemaID;\n            }\n        }\n    }\n\n    return _ajv;\n};\n\n/**\n * Wrapper for Ajv JSON-PropertiesModel Validator\n * @private\n */\nexport class AjvWrapper {\n    /**\n     * @constructor\n     * @param owner\n     * @param schemas\n     * @param ajvOptions\n     */\n    constructor(owner, schemas, options = {}) {\n        // ensures that we are given something that represents a Model object\n        if ((!owner) || !(owner instanceof Model)) {\n            throw \"Model is required at arguments[0]\";\n        }\n\n        if (_validators.get(this) === void(0)) {\n            _validators.set(this, {});\n        }\n\n        // defines getter for parent Model reference\n        Object.defineProperty(this, \"$owner\", {\n            get: () => owner,\n            enumerable: false,\n        });\n\n        // applies user specified options over our default Ajv Options\n        const opts = Object.assign(ajvOptions, options);\n\n        // makes user defined options object accessible for evaluation\n        Object.defineProperty(this, \"options\", {\n            get: () => opts,\n            enumerable: true,\n        });\n\n        // declares default path of root# for validation queries\n        this.path = \"root#\";\n\n        // appends trailing \"#\" to end of \"id\" string if missing\n        const _procID = (id) => id.match(/#+$/) === null ? `${id}#` : id;\n\n        // processes schema \"id\" for JSON-schemas =< v04 and >= v06\n        const _procSchema = (_s) => {\n            if (_s.hasOwnProperty(\"$id\")) {\n                _s[\"$id\"] = _procID(_s[\"$id\"]);\n            }\n\n            if (_s.hasOwnProperty(\"id\")) {\n                _s[\"id\"] = _procID(_s[\"id\"]);\n            }\n            return _s;\n        };\n\n        // evaluates contents of schemas to normalize \"id\" attributes to have trailing \"#\"\n        if ((typeof schemas) === \"object\") {\n            if (schemas.hasOwnProperty(\"schemas\")) {\n                if (Array.isArray(schemas.schemas)) {\n                    schemas.schemas = schemas.schemas.map(_procSchema);\n                } else {\n                    schemas.schemas = _procSchema(schemas.schemas);\n                }\n            } else {\n                if (Array.isArray(schemas)) {\n                    schemas = schemas.map(_procSchema);\n                } else {\n                    schemas = _procSchema(schemas);\n                }\n            }\n        }\n\n        const _ajv = createAjv(this, schemas, opts);\n\n        // initializes Ajv instance for this Doc and stores it to WeakMap\n        _ajvRef.set(this, _ajv);\n\n        // accept no further modifications to this object\n        Object.seal(this);\n    }\n\n    /**\n     * Helper method to derive path for given model\n     * todo: review for removal\n     * @param model\n     * @return {string}\n     */\n    static resolvePath(model) {\n        return \"not yet implemented\";\n    }\n\n    /**\n     * Getter for captive Ajv validator\n     * -- use this for Ajv API Methods\n     * @returns {ajv}\n     */\n    get $ajv() {\n        return _ajvRef.get(this);\n    }\n\n    /**\n     * Executes validator at PropertiesModel $model `path` against `value`\n     * @param {string} path\n     * @param {any} value\n     */\n    exec(path, value) {\n        // appends id ref to path\n        if (path.indexOf(\"#\") < 0) {\n            path = `${this.path}${path}`;\n        }\n\n        let _res = false;\n        /*\n            makes initial validation attempt and reattempts from top on failure\n         */\n        try {\n            _res = this.$ajv.validate(path, value);\n        } catch (e) {\n\n            if (path.replace(/(items|properties)\\/?/, \"\").split(\"/\").length) {\n                return this.exec(`${this.path}/`, _preconstruct(path, value, this.$owner));\n            }\n\n            throw(e);\n        }\n\n        return _res;\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_ajvWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "_validators",
    "memberof": "src/Model/_ajvWrapper.js",
    "static": true,
    "longname": "src/Model/_ajvWrapper.js~_validators",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "_preconstruct",
    "memberof": "src/Model/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/_ajvWrapper.js~_preconstruct",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_ajvWrapper.js",
    "importStyle": null,
    "description": "backreferences object tree for top-down evaluation",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "createAjv",
    "memberof": "src/Model/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/_ajvWrapper.js~createAjv",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/_ajvWrapper.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ajv | ajv.Ajv}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inst",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ajv ",
        " ajv.Ajv"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "AjvWrapper",
    "memberof": "src/Model/_ajvWrapper.js",
    "static": true,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_ajvWrapper.js",
    "importStyle": "{AjvWrapper}",
    "description": "Wrapper for Ajv JSON-PropertiesModel Validator",
    "lineNumber": 110,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ajvOptions",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "path",
    "memberof": "src/Model/_ajvWrapper.js~AjvWrapper",
    "static": false,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper#path",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "resolvePath",
    "memberof": "src/Model/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper.resolvePath",
    "access": "public",
    "description": "Helper method to derive path for given model\ntodo: review for removal",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "$ajv",
    "memberof": "src/Model/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper#$ajv",
    "access": "public",
    "description": "Getter for captive Ajv validator\n-- use this for Ajv API Methods",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ajv}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ajv"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "exec",
    "memberof": "src/Model/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_ajvWrapper.js~AjvWrapper#exec",
    "access": "public",
    "description": "Executes validator at PropertiesModel $model `path` against `value`",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/Model/_ajvWrapper.test.js",
    "content": "import {default as JSONSchemaV4} from \"../schemas/json-schema-draft-04\";\nimport {default as JSONSchemaV6} from \"../schemas/json-schema-draft-06\";\nimport {default as OpenAPIv2} from \"../../fixtures/OpenAPIv2\";\nimport {default as PetStoreV2} from \"../../fixtures/petstore.v2\";\nimport {default as BasicAPI} from \"../../fixtures/basic-api.swagger\";\nimport Ajv from \"ajv\";\nimport {AjvWrapper} from \"./_ajvWrapper\";\nimport {Model} from \"./index\";\nimport addFormats from \"ajv-formats\";\n\ndescribe(\"AJVWrapper Tests\", () => {\n    describe(\"AJV Standalone -- version integrity & debug\", () => {\n        it(\"should handle OpenAPI2.0 Schemas (updated to JSON-Schema draft-07)\", () => {\n            const _ajv = new Ajv({\n                allowUnionTypes: true,\n            });\n\n            addFormats(_ajv);\n\n            _ajv.addSchema(JSONSchemaV4,\"http://json-schema.org/draft-04/schema#\");\n            _ajv.addSchema(OpenAPIv2, \"http://swagger.io/v2/schema.json#\");\n\n            const _v = _ajv.validate(\"http://swagger.io/v2/schema.json#\", PetStoreV2);\n\n            expect(_ajv.errors).toBe(null);\n            expect(_v).toBe(true);\n\n        });\n    });\n\n    describe(\"AJVWrapper\", () => {\n        it(\"should handle v6 Schemas\", () => {\n            const schemas = {\n                meta: [JSONSchemaV4],\n                schemas: [OpenAPIv2],\n            };\n\n            const owner = new Model(schemas);\n            const _ajv = new AjvWrapper(owner, schemas);\n\n            const _isValid = _ajv.exec(`${OpenAPIv2.$id}`, PetStoreV2);\n            owner.model = PetStoreV2;\n\n            expect(owner.errors).toBe(null);\n            expect(_isValid).toBe(true);\n            expect(JSON.parse(`${owner}`)).toEqual(PetStoreV2);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_ajvWrapper.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/Model/_branchNotifier.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_oBuilders} from \"./_references\";\n\nconst notifiers = new WeakMap();\n\n/**\n * protocol for Errors\n */\nclass ErrorNotification {\n    /**\n     * @constructor\n     * @param {string} path\n     * @param {string|string[]} error\n     */\n    constructor(path, error) {\n        // defines getter for `path` prop\n        Object.defineProperty(this, \"path\", {\n            get: () => path,\n            enumerable: true,\n        });\n        // defines getter for `error` prop\n        Object.defineProperty(this, \"error\", {\n            get: () => error,\n            enumerable: true,\n        });\n    }\n\n    toString() {\n        return `\"${this.path}\": ${JSON.stringify(this.error)}`;\n    }\n}\n\n/**\n * todo: implement this somewhere\n */\nclass CompleteNotification {\n    /**\n     * @constructor\n     * @param {string} path\n     */\n    constructor(path) {\n        Object.defineProperty(this, \"path\", {\n            get: () => path,\n            enumerable: true,\n        });\n    }\n}\n\n/**\n * Notification Management\n * acts as liason between Models and RxJS Subscription Dispatchers\n */\nclass Notifier {\n    /**\n     *\n     * @param owner\n     * @returns {Notifier|*}\n     */\n    constructor(owner) {\n        Object.defineProperty(this, \"$owner\", {\n            get: () => owner,\n        });\n\n        notifiers.set(owner, this);\n    }\n\n    /**\n     * Delegates sending RxJS `next` notifications\n     * @param forPath\n     */\n    sendNext(forPath) {\n        setTimeout(() => {\n            this.$owner.getModelsInPath(forPath).forEach(\n                (m) => {\n                    _oBuilders.get(this.$owner).next(m.$model)\n                }\n            );\n        }, 0);\n    }\n\n    /**\n     * Delegates sending RxJS `error` notifications\n     * @param forPath\n     * @param error\n     */\n    sendError(forPath, error) {\n        this.$owner.getModelsInPath(forPath)\n            .forEach((model) => _oBuilders.get(this.$owner).error(model.$model,\n                new ErrorNotification(model.$model.path, error)));\n    }\n\n    /**\n     * Delegates sending RxJS `complete` notifications\n     * @param forPath\n     */\n    sendComplete(forPath) {\n        this.$owner.getModelsInPath(forPath)\n            .forEach((model) => _oBuilders.get(this.$owner).complete(model.$model));\n    }\n}\n\n/**\n * Creates and Retrives Notification Handlers\n * @static\n */\nexport default class Notifiers {\n    /**\n     *\n     * @param owner\n     * @returns {*}\n     */\n    static create(owner) {\n        new Notifier(owner);\n        return notifiers.get(owner);\n    }\n\n    /**\n     *\n     * @param owner\n     * @returns {*}\n     */\n    static get(owner) {\n        return notifiers.get(owner);\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_branchNotifier.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "notifiers",
    "memberof": "src/Model/_branchNotifier.js",
    "static": true,
    "longname": "src/Model/_branchNotifier.js~notifiers",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/_branchNotifier.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "ErrorNotification",
    "memberof": "src/Model/_branchNotifier.js",
    "static": true,
    "longname": "src/Model/_branchNotifier.js~ErrorNotification",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/_branchNotifier.js",
    "importStyle": null,
    "description": "protocol for Errors",
    "lineNumber": 33,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_branchNotifier.js~ErrorNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~ErrorNotification#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Model/_branchNotifier.js~ErrorNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~ErrorNotification#toString",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "CompleteNotification",
    "memberof": "src/Model/_branchNotifier.js",
    "static": true,
    "longname": "src/Model/_branchNotifier.js~CompleteNotification",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/_branchNotifier.js",
    "importStyle": null,
    "description": "todo: implement this somewhere",
    "lineNumber": 60,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_branchNotifier.js~CompleteNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~CompleteNotification#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "Notifier",
    "memberof": "src/Model/_branchNotifier.js",
    "static": true,
    "longname": "src/Model/_branchNotifier.js~Notifier",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/_branchNotifier.js",
    "importStyle": null,
    "description": "Notification Management\nacts as liason between Models and RxJS Subscription Dispatchers",
    "lineNumber": 77,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_branchNotifier.js~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~Notifier#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Notifier|*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Notifier",
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "sendNext",
    "memberof": "src/Model/_branchNotifier.js~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~Notifier#sendNext",
    "access": "public",
    "description": "Delegates sending RxJS `next` notifications",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "forPath",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "sendError",
    "memberof": "src/Model/_branchNotifier.js~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~Notifier#sendError",
    "access": "public",
    "description": "Delegates sending RxJS `error` notifications",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "forPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "sendComplete",
    "memberof": "src/Model/_branchNotifier.js~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_branchNotifier.js~Notifier#sendComplete",
    "access": "public",
    "description": "Delegates sending RxJS `complete` notifications",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "forPath",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "Notifiers",
    "memberof": "src/Model/_branchNotifier.js",
    "static": true,
    "longname": "src/Model/_branchNotifier.js~Notifiers",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/_branchNotifier.js",
    "importStyle": "Notifiers",
    "description": "Creates and Retrives Notification Handlers",
    "lineNumber": 130,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "create",
    "memberof": "src/Model/_branchNotifier.js~Notifiers",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/_branchNotifier.js~Notifiers.create",
    "access": "public",
    "description": "",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "get",
    "memberof": "src/Model/_branchNotifier.js~Notifiers",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/_branchNotifier.js~Notifiers.get",
    "access": "public",
    "description": "",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/Model/_metaData.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_mdRef} from \"./_references\";\nimport {PropertiesModel} from \"./propertiesModel\";\nimport {ItemsModel} from \"./itemsModel\";\nconst _mData = new WeakMap();\n\n/**\n * @private\n */\nexport class MetaData {\n    /**\n     * @constructor\n     * @param {PropertiesModel|ItemsModel} _oRef -- Object Reference to item being described\n     * @param {object} _data -- Initial Data {parent:PropertiesModel|ItemsModel}\n     */\n    constructor(_oRef, _data = {}) {\n        let _cName = _oRef.constructor.name;\n        if (this._createID == null) {\n            let _id = 0;\n            MetaData.prototype._createID = function () {\n                if (this.__objID == null) {\n                    _id = _id + 1;\n                    this.__objID = `${_cName}${_id}`;\n                }\n                return this.__objID;\n            };\n        }\n\n        _data = Object.assign({}, _data, {\n            _id: this._createID(),\n            _className: _cName,\n            _created: Date.now()\n        });\n\n        _mData.set(this, _data);\n        _mdRef.set(this, this);\n    }\n\n    /**\n     * @param {string} key\n     */\n    get(key) {\n        let __ = _mData.get(this);\n        return __ && __.hasOwnProperty(key) ? __[key] : null;\n    }\n\n    /**\n     * not implemented\n     */\n    set() {\n        return this;\n    }\n\n    /**\n     * UUID of element\n     * @returns {string} Unique ObjectID\n     */\n    get objectID() {\n        return this.get(\"_id\");\n    }\n\n    /**\n     * Root PropertiesModel element\n     * @returns {PropertiesModel|Set}\n     */\n    get root() {\n        return this.get(\"_root\");\n    }\n\n    /**\n     * Path to element\n     * @returns {string}\n     */\n    get path() {\n        return `${this.get(\"_path\")}`;\n    }\n\n    /**\n     * Owner Model document\n     * @returns {Model}\n     */\n    get owner() {\n        return this.get(\"_owner\");\n    }\n\n    /**\n     * Getter for parent model\n     * @returns {string | null}\n     */\n    get parent() {\n        return this.get(\"_parent\");\n    }\n\n    /**\n     * Provides representation of Model as JSON string\n     * @return {string}\n     */\n    toString() {\n        return JSON.stringify(_mData.get(this));\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_metaData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "_mData",
    "memberof": "src/Model/_metaData.js",
    "static": true,
    "longname": "src/Model/_metaData.js~_mData",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_metaData.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "MetaData",
    "memberof": "src/Model/_metaData.js",
    "static": true,
    "longname": "src/Model/_metaData.js~MetaData",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_metaData.js",
    "importStyle": "{MetaData}",
    "description": "",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PropertiesModel",
          "ItemsModel"
        ],
        "spread": false,
        "optional": false,
        "name": "_oRef",
        "description": "- Object Reference to item being described"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "_data",
        "description": "- Initial Data {parent:PropertiesModel|ItemsModel}"
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "__objID",
    "memberof": "src/Model/_metaData.js~MetaData",
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#__objID",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "get",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#get",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "set",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#set",
    "access": "public",
    "description": "not implemented",
    "lineNumber": 74,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "get",
    "name": "objectID",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#objectID",
    "access": "public",
    "description": "UUID of element",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Unique ObjectID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Unique ObjectID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "get",
    "name": "root",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#root",
    "access": "public",
    "description": "Root PropertiesModel element",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PropertiesModel|Set}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PropertiesModel",
        "Set"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "get",
    "name": "path",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#path",
    "access": "public",
    "description": "Path to element",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "get",
    "name": "owner",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#owner",
    "access": "public",
    "description": "Owner Model document",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "get",
    "name": "parent",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#parent",
    "access": "public",
    "description": "Getter for parent model",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string | null}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string ",
        " null"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Model/_metaData.js~MetaData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_metaData.js~MetaData#toString",
    "access": "public",
    "description": "Provides representation of Model as JSON string",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/Model/_metadata.test.js",
    "content": "import {MetaData} from \"./_metaData\";\nimport {PropertiesModel} from \"./propertiesModel\";\nimport {Model} from \"./index\";\nimport {basicModel} from \"../../fixtures/PropertiesModel.schemas\";\ndescribe(\"MetaData Units\", () => {\n    let _md = null;\n    describe( \"SubClass Validation\", ()=> {\n        it( \"should accept objects that are subclasses of PropertiesModel\", function() {\n            let _ = new PropertiesModel(new Model(basicModel));\n            !expect(() => _md = new MetaData(_, {_path: \"\", _root: _})).not.toThrow(\n                \"new MetaData() argument 1 requires subclass PropertiesModel or ItemsModel. Was subclass of '<Object>'\");\n        });\n        it( \"should accept objects that are subclasses of ItemsModel\", function() {\n            let _ = new Set();\n            expect(()=> _md = new MetaData( _, { _path: \"\", _root: _})).not.toThrow(\n                \"new MetaData() argument 1 requires subclass PropertiesModel or ItemsModel. Was subclass of '<Object>'\"\n            );\n        });\n    });\n    describe( \"Parameter Accessor Validation\", ()=> {\n        const owner = new Model(basicModel);\n        let _ = owner.model.$model;\n        const _md = new MetaData( new PropertiesModel(owner), {_path: \"key\", _root: _, _parent: _});\n        it(\"should access `root` property\", function() {\n            expect(typeof _md.root).toBe(\"object\");\n        });\n        it(\"should access `path` property\", function() {\n            expect(_md.path).toEqual(\"key\");\n        });\n        it(\"should access `parent` property\", function() {\n            let _md = new MetaData( _, { _path: \"\", _root: _});\n            expect(typeof _md.parent).toEqual(\"object\");\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_metadata.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/Model/_observerBuilder.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_observers} from \"./_references\";\nimport {BehaviorSubject, skip} from \"rxjs\";\n\nconst _observerPaths = new WeakMap();\nconst _observerCache = new WeakMap();\n\nexport class ObserverBuilder {\n    /**\n     * @constructor\n     */\n    constructor() {\n        _observers.set(this, new WeakMap());\n        _observerCache.set(this, new WeakMap());\n        _observerPaths.set(this, {});\n    }\n\n    /**\n     * Retrieves BehaviorSubject Collection for given Model\n     * @param model {BaseModel}\n     * @returns {Object|null} Observer at path reference\n     */\n    getObserverForModel(model) {\n        return _observers.get(this).get(model) || null;\n    }\n\n    /**\n     * Retrieves BehaviorSubject Collection for Model at given path\n     * @param path {string}\n     * @returns {*}\n     */\n    getObserverForPath(path) {\n        const _oP = _observerPaths.get(this);\n        return _oP.hasOwnProperty(path) ? _oP[path] : null;\n    }\n\n    /**\n     * Lists all registered observer paths\n     * @returns {[string]}\n     */\n    list() {\n        return Object.keys(_observerPaths.get(this));\n    }\n\n    /**\n     * Creates BehaviorSubjects for given Model\n     * @param target {BaseModel}\n     */\n    create(target) {\n        if (!target.path) {\n            throw (\"target object is invalid\");\n        }\n\n        const _oP = _observerPaths.get(this);\n\n        if (_oP.hasOwnProperty(target.path)) {\n            return _oP[target.path];\n        }\n\n        const _o = _observers.get(this);\n        const _existing = this.getObserverForPath(target.path);\n        if (_existing) {\n            return _o.get(target);\n        }\n\n        const _h = {\n            path: target.path,\n            jsonPath: target.jsonPath,\n            targetId: target.objectID,\n        };\n\n        [\"onNext\", \"onError\", \"onComplete\"].forEach((_k) => {\n            const _subj = new BehaviorSubject(null);\n            Object.defineProperty(_h, _k, {\n                value: _subj.pipe(skip(1)),\n                enumerable: true,\n                configurable: false,\n                writable: false,\n            });\n        });\n\n        _o.set(target, _h);\n\n        _observerPaths.set(this, Object.defineProperty(\n            _observerPaths.get(this), `${target.path}`, {\n                value: _h\n            })\n        );\n        return _h;\n    }\n\n    /**\n     * Mutes notifications to `target` observers\n     * @param target\n     */\n    mute(target) {\n        const _idx = this.list().indexOf(target.path);\n        _observerCache.get(this).set(target, {idx: _idx, value: target.path});\n    }\n\n    /**\n     * Unmutes notifications to `target` observers if muted\n     * @param target\n     */\n    unmute(target) {\n        _observerCache.get(this).delete(target);\n    }\n\n    /**\n     * Calls next on Next Subject\n     * @param target {BaseModel}\n     */\n    next(target) {\n        if (!target || target.isDirty || _observerCache.get(target)) {\n            return;\n        }\n\n        const _o = this.getObserverForPath(target.path) || null;\n        if (_o) {\n            _o.onNext.next(target);\n        }\n    }\n\n    /**\n     * Calls next on Complete Subject\n     * @param target {BaseModel}\n     */\n    complete(target) {\n        let _o = this.getObserverForModel(target);\n        if (_o !== null) {\n            _o.onComplete.next();\n        }\n    }\n\n    /**\n     * Calls next on Error Subject\n     * @param target {BaseModel}\n     * @param message {*}\n     */\n    error(target, message) {\n        let _o = this.getObserverForModel(target);\n        if (_o !== null) {\n            _o.onError.next(message);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_observerBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "_observerPaths",
    "memberof": "src/Model/_observerBuilder.js",
    "static": true,
    "longname": "src/Model/_observerBuilder.js~_observerPaths",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_observerBuilder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "_observerCache",
    "memberof": "src/Model/_observerBuilder.js",
    "static": true,
    "longname": "src/Model/_observerBuilder.js~_observerCache",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_observerBuilder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ObserverBuilder",
    "memberof": "src/Model/_observerBuilder.js",
    "static": true,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/_observerBuilder.js",
    "importStyle": "{ObserverBuilder}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "getObserverForModel",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#getObserverForModel",
    "access": "public",
    "description": "Retrieves BehaviorSubject Collection for given Model",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null} Observer at path reference"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "{BaseModel}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": "Observer at path reference"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getObserverForPath",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#getObserverForPath",
    "access": "public",
    "description": "Retrieves BehaviorSubject Collection for Model at given path",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "list",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#list",
    "access": "public",
    "description": "Lists all registered observer paths",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{[string]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "create",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#create",
    "access": "public",
    "description": "Creates BehaviorSubjects for given Model",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{BaseModel}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "mute",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#mute",
    "access": "public",
    "description": "Mutes notifications to `target` observers",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "unmute",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#unmute",
    "access": "public",
    "description": "Unmutes notifications to `target` observers if muted",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "next",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#next",
    "access": "public",
    "description": "Calls next on Next Subject",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{BaseModel}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "complete",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#complete",
    "access": "public",
    "description": "Calls next on Complete Subject",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{BaseModel}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "error",
    "memberof": "src/Model/_observerBuilder.js~ObserverBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_observerBuilder.js~ObserverBuilder#error",
    "access": "public",
    "description": "Calls next on Error Subject",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{BaseModel}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "{*}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/Model/_observerBuilder.test.js",
    "content": "import {ObserverBuilder} from \"./_observerBuilder\";\nimport {Model} from \"./index\";\nimport {PropertiesModel} from \"./propertiesModel\";\n\ndescribe(\"ObserverBuilder Unit Test Suite\", () => {\n    describe(\"Builder Methods\", () => {\n        let _observer = null;\n        let _observerForModel = null;\n        let _model = null;\n        const _schema = {\n            $id: \"root#\",\n            type: \"object\",\n            properties: {\n                name: {\n                    type: \"string\",\n                },\n                active: {\n                    type: [\"boolean\", \"number\"],\n                }\n            },\n        }\n\n        beforeEach(function () {\n            _observer = new ObserverBuilder();\n            // try {\n            //     _model = new Model({schemas: [_schema]});\n            // } catch (e) {\n            //     console.error(e);\n            // }\n\n            const _root = new Model({\n                schemas: [_schema],\n                //     [{\n                //     $id: \"root#\",\n                //     type: \"object\",\n                //     properties: {\n                //         testing: {\n                //             type: \"object\",\n                //             properties: _schema.properties,\n                //         },\n                //     },\n                // }]\n            });\n\n            _model = new PropertiesModel(_root, \"root#\")\n\n            _observerForModel = _observer.create(_model);\n        });\n\n        it(\"should create an observer\", function () {\n            expect(Object.keys(_observer.getObserverForModel(_model)))\n                .toEqual(['path', 'jsonPath', 'targetId', 'onNext', 'onError', 'onComplete']);\n        });\n\n        it.skip(\"should subscribe to observer and get value\", function (done) {\n            const _data = {\n                name: \"item-A\",\n                active: true\n            };\n\n            const _f = {\n                next: (o) => {\n                    expect(`${o}`).toBe(JSON.stringify(_data));\n                    done();\n                },\n                error: (e) => {\n                    done(e);\n                }\n            };\n            _model.subscribe(_f);\n            _model.model = _data;\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_observerBuilder.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/Model/_references.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\n\n/**\n * Holder for PropertiesModel and ItemsModel instance references\n *\n * @type {WeakMap}\n * @private\n */\nexport const _object = new WeakMap();\n\n/**\n * Holder for MetaData references\n * @type {WeakMap}\n * @private\n */\nexport const _mdRef = new WeakMap();\n\n/**\n * Holder for AjvWrapper references\n * @type {WeakMap<Object, ajv>}\n * @private\n */\nexport const _ajvRef = new WeakMap();\n\n/**\n * Holder for models in transition\n *\n * @type {WeakMap}\n * @private\n */\nexport const _dirtyModels = new WeakMap();\n\n/**\n * Holder for PropertiesModel Validators\n * @type {WeakMap}\n * @private\n */\nexport const _validators = new WeakMap();\n\n/**\n * Holder for PropertiesModel options refeerences\n *\n * @type {WeakMap}\n * @private\n */\nexport const _schemaOptions = new WeakMap();\n\n/**\n * Holder for PropertiesModel Helpers references\n *\n * @type {WeakMap}\n * @private\n */\nexport const _schemaHelpers = new WeakMap();\n\n/**\n * Holder for RXJS Observer references\n * @type {WeakMap}\n * @private\n */\nexport const _observers = new WeakMap();\n\n/**\n * Holder for RXJS Observer references\n * @type {WeakMap}\n * @private\n */\nexport const _observerPaths = new WeakMap();\n\n/**\n * Holder for Observer Builders\n * @type {WeakMap}\n * @private\n */\nexport const _oBuilders = new WeakMap();\n\n/**\n * Holder for JSON-Schemas\n * @type {WeakMap}\n * @private\n */\nexport const _schemaSignatures = new WeakMap();\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_references.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "_object",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_object",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_object}",
    "description": "Holder for PropertiesModel and ItemsModel instance references",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "_mdRef",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_mdRef",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_mdRef}",
    "description": "Holder for MetaData references",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "_ajvRef",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_ajvRef",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_ajvRef}",
    "description": "Holder for AjvWrapper references",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap<Object, ajv>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "_dirtyModels",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_dirtyModels",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_dirtyModels}",
    "description": "Holder for models in transition",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "_validators",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_validators",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_validators}",
    "description": "Holder for PropertiesModel Validators",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "_schemaOptions",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_schemaOptions",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_schemaOptions}",
    "description": "Holder for PropertiesModel options refeerences",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "_schemaHelpers",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_schemaHelpers",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_schemaHelpers}",
    "description": "Holder for PropertiesModel Helpers references",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "_observers",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_observers",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_observers}",
    "description": "Holder for RXJS Observer references",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "_observerPaths",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_observerPaths",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_observerPaths}",
    "description": "Holder for RXJS Observer references",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "_oBuilders",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_oBuilders",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_oBuilders}",
    "description": "Holder for Observer Builders",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "_schemaSignatures",
    "memberof": "src/Model/_references.js",
    "static": true,
    "longname": "src/Model/_references.js~_schemaSignatures",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_references.js",
    "importStyle": "{_schemaSignatures}",
    "description": "Holder for JSON-Schemas",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/Model/_references.test.js",
    "content": "import each from \"jest-each\";\nimport {\n    _validators, _schemaHelpers,\n    _mdRef, _object,\n    _observers, _oBuilders,\n    _dirtyModels,\n    _schemaSignatures\n} from \"./_references\";\n\ndescribe(\"Maps Units\", () => {\n\n    describe(\"Shared WeakMap Reference Holders\", () => {\n        each([\n            [_validators, WeakMap, true],\n            [_schemaHelpers, WeakMap, true],\n            [_mdRef, WeakMap, true],\n            [_object, WeakMap, true],\n            [_observers, WeakMap, true],\n            [_oBuilders, WeakMap, true],\n            [_schemaSignatures, WeakMap, true],\n            [_dirtyModels, WeakMap, true],\n        ])\n            .it(\"expects %s to be a Weakmap\", (a, b, expected) => {\n                expect(a instanceof b).toBe(expected);\n            });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_references.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/Model/_schemaHelpers.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_mdRef, _oBuilders} from \"./_references\";\nimport {MetaData} from \"./_metaData\";\nimport {PropertiesModel} from \"./propertiesModel\";\nimport {ItemsModel} from \"./itemsModel\";\n\n/**\n * @private\n */\nexport class SchemaHelpers {\n    /**\n     * @constructor\n     */\n    constructor(_ref) {\n        if (!_ref || (typeof _ref) !== \"object\") {\n            throw new Error(\"arguments[0] must be an object\");\n        }\n\n        this._ref = _ref;\n        Object.seal(this);\n    }\n\n    /**\n     * Sets Object key/values upon PropertiesModel Reference\n     * @param obj\n     * @returns {*}\n     */\n    setObject(obj) {\n        if (typeof obj === \"string\") {\n            return obj;\n        }\n        // calls set with nested key value pair\n        Object.keys(obj).forEach((k) => {\n            let eMsg = this._ref.set(k, obj[k]);\n            if (typeof eMsg === \"string\") {\n                throw new Error(eMsg);\n            }\n        });\n        return this._ref;\n    }\n\n    /**\n     * Creates Child Model and set data on it\n     * @param key\n     * @param value\n     * @returns {*}\n     */\n    setChildObject(key, value) {\n        let _mdData = _mdRef.get(this._ref);\n        let _s = this.createSchemaChild(key, value, _mdData);\n        // creates Observables for new Child Model\n        _oBuilders.get(this._ref.owner).create(_s);\n\n        if (typeof _s === \"string\") {\n            return _s;\n        } else if (!_s  || typeof _s !== \"object\") {\n            return `'${key}' was invalid`;\n        }\n\n        _s.model = value;\n        return _s.model;\n    }\n\n    /**\n     * Creates Child Model\n     * @param {string} key\n     * @param {*} value\n     * @param {MetaData} metaData\n     * @returns {BaseModel|string} - PropertiesModel, ItemsModel or error string\n     */\n    createSchemaChild(key, value, metaData) {\n        let path = !Array.isArray(this._ref.model) ?\n            `${this._ref.path}/properties/${key}` : `${this._ref.path}/items`;\n        // populates MetaData config object\n        let _d = Object.assign({\n            _path: path,\n            _parent: this._ref,\n            _root: this._ref.root,\n            _owner: this._ref.owner,\n        }, metaData || {});\n\n        // constructs new MetaData object with owner as reference point for chaining\n        let _md = new MetaData(this._ref, _d);\n\n        // returns new child Model\n        return new ((!Array.isArray(value)) ? PropertiesModel : ItemsModel)(_md);\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_schemaHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "SchemaHelpers",
    "memberof": "src/Model/_schemaHelpers.js",
    "static": true,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/_schemaHelpers.js",
    "importStyle": "{SchemaHelpers}",
    "description": "",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_ref",
    "memberof": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "static": false,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers#_ref",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "setObject",
    "memberof": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers#setObject",
    "access": "public",
    "description": "Sets Object key/values upon PropertiesModel Reference",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "setChildObject",
    "memberof": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers#setChildObject",
    "access": "public",
    "description": "Creates Child Model and set data on it",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "createSchemaChild",
    "memberof": "src/Model/_schemaHelpers.js~SchemaHelpers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/_schemaHelpers.js~SchemaHelpers#createSchemaChild",
    "access": "public",
    "description": "Creates Child Model",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseModel|string} - PropertiesModel, ItemsModel or error string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MetaData"
        ],
        "spread": false,
        "optional": false,
        "name": "metaData",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseModel",
        "string"
      ],
      "spread": false,
      "description": "PropertiesModel, ItemsModel or error string"
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/Model/_schemaHelpers.test.js",
    "content": "import {_mdRef} from \"./_references\";\nimport {PropertiesModel} from \"./propertiesModel\";\nimport {Model} from \"./index\";\nimport {SchemaHelpers} from \"./_schemaHelpers\";\nimport {basicModel} from \"../../fixtures/PropertiesModel.schemas\";\nconst _owner = new Model({schemas: [{\n        $id: \"test#\",\n        type: \"object\",\n    }]});\n\ndescribe(\"SchemaHelpers Class Tests\", () => {\n    let _schema, _sH;\n\n    // beforeEach(() => {\n    //     _owner = new Model(basicModel);\n    //     _schema = new PropertiesModel(_owner);\n    //     _sH = new SchemaHelpers(_schema);\n    // });\n\n    describe(\"Child Object Methods\", () => {\n        beforeEach(() => {\n            _schema = new PropertiesModel(_owner, \"childElement\");\n            _sH = new SchemaHelpers(_schema);\n        });\n\n        it(\"should set PropertiesModel from Object values\", () => {\n            expect((typeof _sH.setObject({properties: {name: \"bar\"}})) === \"string\").toBe(false);\n            expect(_schema.model.properties.name).toBe(\"bar\");\n        });\n\n        describe(\"Create Object\", () => {\n            it(\"should create Child PropertiesModel Object\", () => {\n                let _sC = _sH.createSchemaChild(\"foo\", {}, _mdRef.get(_schema));\n                expect((typeof _sC) === \"string\").toBe(false);\n                expect(_sC instanceof PropertiesModel).toBe(true);\n            });\n        });\n        describe(\"ItemsModel Values\", () => {\n            it(\"should set Value Object on Child PropertiesModel\", () => {\n                const sH = new SchemaHelpers(_schema);\n                const _child = sH.setChildObject(\"\", {baz: 123});\n                expect(typeof _child).toBe(\"object\");\n                expect(_child.baz).toBe(123);\n            });\n        });\n\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/_schemaHelpers.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "_owner",
    "memberof": "src/Model/_schemaHelpers.test.js",
    "static": true,
    "longname": "src/Model/_schemaHelpers.test.js~_owner",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/_schemaHelpers.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "src/Model/index.js~Model"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/Model/base-model.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {\n    _mdRef, _oBuilders, _object, _schemaOptions, _dirtyModels\n} from \"./_references\";\nimport {Model} from \"./index\";\nimport {MetaData} from \"./_metaData\";\nimport {makeClean, makeDirty, validate} from \"./utils\";\nimport {Pipeline} from \"../Pipeline\";\n/**\n *\n * @param ref\n * @param metaRef\n */\nconst createMetaDataRef = (ref, metaRef, path) => {\n    let _md;\n    if (metaRef instanceof Model) {\n        // root properties are handed the Model object\n        // will create new MetaData and set reference as root element\n        _md = new MetaData(ref, {\n            _path: path || \"root#\",\n            _parent: null,\n            _root: ref,\n            _owner: metaRef || null,\n        });\n    } else if ((typeof metaRef) === \"object\") {\n        // extends MetaData reference\n        if (metaRef instanceof MetaData) {\n            _md = metaRef;\n        } else {\n            // todo: re-evaluate this line for possible removal\n            _md = new MetaData(ref, metaRef);\n        }\n    } else {\n        throw \"Invalid attempt to construct Model.\" +\n        \"tip: use `new Model([schema])` instead\"\n    }\n    // sets MetaData object to global reference\n    _mdRef.set(ref, _md);\n};\n\n/**\n *\n */\nexport class BaseModel {\n    constructor() {\n        createMetaDataRef(this, ...arguments);\n    }\n\n    /**\n     * Subscribes handler method to observer for model\n     * @param func\n     * @returns {object}\n     */\n    subscribe(func) {\n        return this.subscribeTo(this.path, func);\n    }\n\n    /**\n     * Subscribes handler method to property observer for path\n     * @param path\n     * @param func\n     * @return {object}\n     */\n    subscribeTo(path, func) {\n        const _oBuilder = _oBuilders.get(this.owner);\n        let _o = _oBuilder.getObserverForPath(path);\n        if (!_o) {\n            _o = _oBuilder.create(this, `${this.path}`);\n        }\n\n        // support next handler being passed directly\n        // todo: review other valid manners of passing observer callbacks\n        if ((typeof func) === \"function\") {\n            func = {next: func};\n        }\n\n        // references to subscriptions for Observable\n        const _subRefs = [];\n\n        // inits observer handlers if defined on passed `func` object\n        [\n            {call: \"onNext\", func: \"next\"},\n            {call: \"onError\", func: \"error\"},\n            {call: \"onComplete\", func: \"complete\"},\n        ].forEach((obs) => {\n            if (func.hasOwnProperty(obs.func)) {\n                _subRefs.push( _o[obs.call].subscribe({next: func[obs.func]}) );\n            }\n        });\n\n        // creates an extensible object to hold our unsubscribe method\n        // and adds unsubscribe calls to the Proto object\n        const _subs = class { };\n\n        // adds unsubscribe to the Proto object\n        _subs.prototype.unsubscribe = () => {\n            _subRefs.forEach((sub) => {\n                sub.unsubscribe();\n            });\n        };\n\n        return new _subs();\n    }\n\n    /**\n     * Tests value for validation without setting value to Model\n     * @param {json} value - JSON value to validate for validity\n     * @return {boolean}\n     */\n    validate(value) {\n        try {\n            return validate(this, this.validationPath, value);\n        } catch (e) {\n            // couldn't find schema, so is Additional Properties\n            // todo: review `removeAdditional` ajv option for related behavior\n            return true;\n        }\n    }\n\n    /**\n     * resets Model to empty value\n     * @return {BaseModel}\n     */\n    reset() {\n        const _isArray = Array.isArray(this.model);\n        const _o = !_isArray ? {} : [];\n        const _res = this.validate(_o);\n        // validates that this model be returned to an empty value\n        if (_res !== true) {\n            _oBuilders.get(this.owner).error(this, _res);\n            return this;\n        }\n\n        // marks this model as out of sync with tree\n        makeDirty(this);\n\n        // closure to handle the freeze operation safely\n        const _freeze = (itm) => {\n            if (!Object.isFrozen(itm)) {\n                itm.freeze();\n            }\n        };\n\n        // freezes all child Model/Elements\n        // -- prevent changes to Children\n        // -- sends \"complete\" notification to their Observers\n        // -- revokes their Models if revocable\n        const _i = !_isArray ? Object.keys(this.model) : this.model;\n        _i.forEach((itm) => _freeze((!_isArray) ? _i[itm] : itm));\n\n        // creates new Proxied Model to operate on\n        const _p = new Proxy(BaseModel.createRef(this, _o), this.handler);\n        _object.set(this, _p);\n\n        // marks this model as back in sync with tree\n        makeClean(this);\n\n        // sends notification of model change\n        _oBuilders.get(this.owner).next(this);\n\n        return this;\n    }\n\n    /**\n     * Raw value of this Model\n     * @returns {*}\n     */\n    valueOf() {\n        return _object.get(this);\n    }\n\n    /**\n     * Provides JSON object representation of Model\n     */\n    toJSON() {\n        let _derive = (itm) => {\n            // uses toJSON impl if defined\n            if (itm.hasOwnProperty(\"toJSON\") &&\n                (typeof this.toJSON) === \"function\") {\n                return itm.toJSON();\n            }\n\n            // builds new JSON tree if value is object\n            if (typeof itm === \"object\") {\n                const _o = !Array.isArray(itm) ? {} : [];\n                for (let k in itm) {\n\n                    // we validate for property to avoid warnings\n                    if (itm.hasOwnProperty(k)) {\n\n                        // applies property to tree\n                        _o[k] = _derive(itm[k]);\n                    }\n                }\n\n                // returns new JSON tree\n                return _o;\n            }\n            // hands back itm if value wasn't usable\n            return itm;\n        };\n\n        // uses closure for evaluation\n        return _derive(this.valueOf());\n    }\n\n    /**\n     * Provides JSON String representation of Model\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * Applies Object.freeze to model and triggers complete notification\n     * -- unlike Object.freeze, this prevents modification\n     * -- to all children in Model hierarchy\n     * @returns {BaseModel}\n     */\n    freeze() {\n        Object.freeze(_object.get(this));\n        _oBuilders.get(this.owner).complete(this);\n        return this;\n    }\n\n    /**\n     *\n     * @return {object}\n     */\n    get handler() {\n        return {\n            setPrototypeOf: () => false,\n            isExtensible: (t) => Object.isExtensible(t),\n            preventExtensions: (t) => Object.preventExtensions(t),\n            getOwnPropertyDescriptor: (t, key) => Object.getOwnPropertyDescriptor(t, key),\n            defineProperty: (t, key, desc) => Object.defineProperty(t, key, desc),\n            has: (t, key) => key in t,\n            ownKeys: (t) => Reflect.ownKeys(t),\n            apply: () => false,\n        };\n    }\n\n    /**\n     * stub for model getter, overridden by Model sub-class\n     * @return {object|array|null}\n     */\n    get model() {\n        return null;\n    }\n\n    /**\n     * Getter for Model's Unique Object ID\n     * @returns {string} Object ID for Model\n     */\n    get objectID() {\n        return _mdRef.get(this)._id;\n        // return _mdRef.get(this).objectID;\n    }\n\n    /**\n     * Getter for root element of Model hierarchy\n     * @returns {BaseModel}\n     */\n    get root() {\n        return _mdRef.get(this)._root || this;\n    }\n\n    /**\n     * Getter for `path` to current Element\n     * @returns {string}\n     */\n    get path() {\n        return _mdRef.get(this).path;\n    }\n\n    /**\n     * Getter for path to JSON Object for Model\n     * @returns {string}\n     */\n    get jsonPath() {\n        const __ = this.path.replace(/\\/?(properties|items)+\\/?/g, \"/\").split(\"/\");\n        __.shift();\n        return __.join(\".\");\n    }\n\n    /**\n     * Getter for Model's parent\n     * @returns {BaseModel}\n     */\n    get parent() {\n        // attempts to get parent\n        return _mdRef.get(this).parent || null;\n    }\n\n    /**\n     * Getter for Model validation status for hierarchy\n     * @returns {boolean}\n     */\n    get isDirty() {\n        let _res = _dirtyModels.get(this.owner)[this.path] || false;\n        return _res || ((this.parent === null) ? false : this.parent.isDirty);\n    }\n\n    /**\n     * Getter for model's Model owner object\n     * @returns {Model}\n     */\n    get owner() {\n        return _mdRef.get(this).owner;\n    }\n\n    /**\n     * Get options (if any) for this model's schema\n     * todo: review for possible removal\n     * @returns {any}\n     */\n    get options() {\n        return _schemaOptions.get(this);\n    }\n\n    /**\n     * Getter for Object.isFrozen status of this node and it's ancestors\n     * @returns {boolean}\n     */\n    get isFrozen() {\n        let _res = Object.isFrozen(_object.get(this));\n        return !_res ? ((this.parent === null) ? false : this.parent.isFrozen) : _res;\n    }\n\n    /**\n     * Provides formatted string for json-schema lookup\n     * @returns {string}\n     */\n    get validationPath() {\n        return this.path === \"\" ? \"/\" : `${this.path}`;\n    }\n\n    /**\n     * todo: add tests\n     * @returns {*}\n     */\n    get schema() {\n        return this.owner.getSchemaForPath(this.path);\n    }\n\n    /**\n     * creates owner Model reference on Proxied data object\n     * @param ref\n     * @param obj\n     * @returns {*}\n     */\n    static createRef(ref, obj) {\n        Object.defineProperty(obj, \"$model\", {\n            value: ref,\n            writable: false\n        });\n        return obj;\n    };\n\n    /**\n     * returns `pipeline` segment for process chaining\n     * @param pipesOrSchemas\n     * @returns {Pipeline}\n     */\n    pipeline(...pipesOrSchemas) {\n        const _p = new Pipeline(...pipesOrSchemas);\n        const _sub = this.subscribe({\n            next: (d) => {\n                _p.write(d);\n            },\n            complete: () => {\n                _sub.unsubscribe();\n                _p.close();\n            }\n        });\n        return _p;\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/base-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "createMetaDataRef",
    "memberof": "src/Model/base-model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/base-model.js~createMetaDataRef",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/base-model.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ref",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "metaRef",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "BaseModel",
    "memberof": "src/Model/base-model.js",
    "static": true,
    "longname": "src/Model/base-model.js~BaseModel",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/base-model.js",
    "importStyle": "{BaseModel}",
    "description": "",
    "lineNumber": 68,
    "interface": false
  },
  {
    "__docId__": 128,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#subscribe",
    "access": "public",
    "description": "Subscribes handler method to observer for model",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "subscribeTo",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#subscribeTo",
    "access": "public",
    "description": "Subscribes handler method to property observer for path",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "validate",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#validate",
    "access": "public",
    "description": "Tests value for validation without setting value to Model",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "JSON value to validate for validity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#reset",
    "access": "public",
    "description": "resets Model to empty value",
    "lineNumber": 148,
    "return": {
      "nullable": null,
      "types": [
        "BaseModel"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#valueOf",
    "access": "public",
    "description": "Raw value of this Model",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#toJSON",
    "access": "public",
    "description": "Provides JSON object representation of Model",
    "lineNumber": 199,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#toString",
    "access": "public",
    "description": "Provides JSON String representation of Model",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "freeze",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#freeze",
    "access": "public",
    "description": "Applies Object.freeze to model and triggers complete notification\n-- unlike Object.freeze, this prevents modification\n-- to all children in Model hierarchy",
    "lineNumber": 245,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseModel}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseModel"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "get",
    "name": "handler",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#handler",
    "access": "public",
    "description": "",
    "lineNumber": 255,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"setPrototypeOf\": *, \"isExtensible\": *, \"preventExtensions\": *, \"getOwnPropertyDescriptor\": *, \"defineProperty\": *, \"has\": *, \"ownKeys\": *, \"apply\": *}"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "get",
    "name": "model",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#model",
    "access": "public",
    "description": "stub for model getter, overridden by Model sub-class",
    "lineNumber": 272,
    "return": {
      "nullable": null,
      "types": [
        "object",
        "array",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "get",
    "name": "objectID",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#objectID",
    "access": "public",
    "description": "Getter for Model's Unique Object ID",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Object ID for Model"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Object ID for Model"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "get",
    "name": "root",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#root",
    "access": "public",
    "description": "Getter for root element of Model hierarchy",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseModel}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseModel"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "get",
    "name": "path",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#path",
    "access": "public",
    "description": "Getter for `path` to current Element",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "jsonPath",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#jsonPath",
    "access": "public",
    "description": "Getter for path to JSON Object for Model",
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "get",
    "name": "parent",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#parent",
    "access": "public",
    "description": "Getter for Model's parent",
    "lineNumber": 315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseModel}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseModel"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "isDirty",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#isDirty",
    "access": "public",
    "description": "Getter for Model validation status for hierarchy",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "get",
    "name": "owner",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#owner",
    "access": "public",
    "description": "Getter for model's Model owner object",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "get",
    "name": "options",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#options",
    "access": "public",
    "description": "Get options (if any) for this model's schema\ntodo: review for possible removal",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "get",
    "name": "isFrozen",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#isFrozen",
    "access": "public",
    "description": "Getter for Object.isFrozen status of this node and it's ancestors",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "validationPath",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#validationPath",
    "access": "public",
    "description": "Provides formatted string for json-schema lookup",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "get",
    "name": "schema",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#schema",
    "access": "public",
    "description": "todo: add tests",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "createRef",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/base-model.js~BaseModel.createRef",
    "access": "public",
    "description": "creates owner Model reference on Proxied data object",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ref",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "pipeline",
    "memberof": "src/Model/base-model.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/base-model.js~BaseModel#pipeline",
    "access": "public",
    "description": "returns `pipeline` segment for process chaining",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipesOrSchemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/Model/base-model.test.js",
    "content": "import {basicModel} from \"../../fixtures/PropertiesModel.schemas\";\nimport {Model} from \"./index\";\n\ndescribe(\"Model Class Tests\", () => {\n    describe(\"Test Method\", () => {\n        let _owner;\n        const _d = {\n            name: \"Ed Testy\",\n            age: 99,\n            active: true,\n        };\n\n        beforeEach(() => {\n            _owner = new Model({schemas: [basicModel]});\n            _d.active = true;\n        });\n\n        it(\"should validate models against schema\", () => {\n            expect(_owner.model.$model.validate(_d)).toBe(true);\n            _d.active = \"1234\";\n            expect(_owner.model.$model.validate(_d)).toBe(\"data/active must be boolean\");\n        });\n\n        it(\"should support subscription callbacks object\", (done) => {\n            _owner.subscribe({\n                next: () => done(),\n                error: done,\n            });\n            _owner.model = _d;\n        });\n\n        it(\"should allow function as next callback\", (done) => {\n            _owner.subscribe(() => done());\n            _owner.model = _d;\n        });\n\n        it(\"should be observable\", (done) => {\n            let _ival = 0;\n            const _arr = new Array(0, 2000);\n            const _iterator = {\n                next: (\n                    () => _ival++ < _arr.length ? {\n                        value: _owner.model = _d,\n                        done: false,\n                    } : {\n                        value: _owner.freeze(),\n                        done: true,\n                    }\n                ),\n            };\n            _owner.subscribe({next: _iterator.next, complete: done});\n            _iterator.next();\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/base-model.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/Model/index.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {\n    _oBuilders, _validators, _dirtyModels, _schemaSignatures\n} from \"./_references\";\nimport {ObserverBuilder} from \"./_observerBuilder\";\nimport {PropertiesModel} from \"./propertiesModel\";\nimport {ItemsModel} from \"./itemsModel\";\nimport {AjvWrapper} from \"./_ajvWrapper\";\nimport Notifiers from \"./_branchNotifier\";\nimport {walkObject} from \"./utils\";\n\nconst _documents = new WeakMap();\n/**\n * returns Items or Properties model class based on type of expected property\n * @param el\n * @returns {ItemsModel|PropertiesModel|Function}\n * @private\n */\nconst _getModelClass = (el) => {\n    let _class = PropertiesModel;\n\n    if ((el.hasOwnProperty(\"type\") && el[\"type\"] === \"array\") ||\n        (el.hasOwnProperty(\"items\") && Array.isArray(el[\"items\"]))) {\n        _class = ItemsModel;\n    }\n\n    return _class;\n};\n\n/**\n * RxVo Model Entry-point\n * @public\n */\nexport class Model {\n    /**\n     * @constructor\n     * @param {json} schemas\n     * @param {object} options\n     */\n    constructor(schemas, options = {}) {\n        // attempts to get user passes Avj options\n        let ajvOptions = options.hasOwnProperty(\"ajvOptions\") ?\n            options[\"ajvOptions\"] : null;\n\n        // defines AjvWrapper instance for this Document and it's Schemas\n        const _ajv = new AjvWrapper(this, schemas, ajvOptions);\n\n        // sets AjvWrapper instance on map for use\n        _validators.set(this, _ajv);\n\n        // throws error if error message returned\n        if (!_ajv.$ajv.validateSchema({schemas: schemas[\"schemas\"]}, false)) {\n            throw _ajv.$ajv.errors;\n        }\n\n        _schemaSignatures.set(this, schemas);\n        _oBuilders.set(this, new ObserverBuilder());\n\n        const _schema = schemas.hasOwnProperty(\"schemas\") ?\n            schemas.schemas[schemas.schemas.length - 1] : schemas;\n\n        const _doc = new (_getModelClass(_schema))(this, _schema.$id || \"root#\");\n\n        // creates holder for dirty model flags in this scope\n        _dirtyModels.set(this, {});\n\n        // applies Subject Handlers to root document\n        _oBuilders.get(this).create(_doc);\n\n        // sets document to this scope\n        _documents.set(this, _doc);\n\n        // creates RxJS Notification Delegate\n        Notifiers.create(this);\n    }\n\n    /**\n     * Adds Schema to Validator instance\n     * @param schema\n     * @returns {boolean}\n     */\n    addSchema(schema) {\n        _validators.get(this).$ajv.addSchema(schema);\n        return (_validators.get(this).$ajv.errors === null);\n    }\n\n    /**\n     * Selects schema to validate against (advanced option, use wisely)\n     * @param id\n     */\n    useSchema(id) {\n        _validators.get(this).$ajv.getSchema(id);\n    }\n\n    /**\n     * Getter for root Model\n     * @returns {object|array}\n     */\n    get model() {\n        return _documents.get(this).model;\n    }\n\n    /**\n     * Setter for root Model value\n     * @param {object|array} value\n     */\n    set model(value) {\n        _documents.get(this).model = value;\n    }\n\n    /**\n     * Getter for document's JSON-Schema\n     * @return {any}\n     */\n    get schema() {\n        const _id = _validators.get(this).path;\n        return this.getSchemaForKey(_id);\n    }\n\n    /**\n     * Freezes document object\n     * @returns {Model}\n     */\n    freeze() {\n        _documents.get(this).freeze();\n        return this;\n    }\n\n    /**\n     * Returns true if object is frozen\n     * @returns {boolean}\n     */\n    get isFrozen() {\n        return _documents.get(this).isFrozen;\n    }\n\n    /**\n     * returns schema with given id\n     * @param id\n     * @returns {*}\n     */\n    getSchemaForKey(id) {\n        let _schema = null;\n        const _schemas = _schemaSignatures.get(this);\n        _schemas.schemas.some((schema) => {\n            if (schema.hasOwnProperty(\"$id\")) {\n                if (schema.$id === id) {\n                    _schema = schema;\n                    return true;\n                }\n            } else if (schema.hasOwnProperty(\"id\")) {\n                if (schema.id === id) {\n                    _schema = schema;\n                    return true;\n                }\n            }\n            return false;\n        });\n        return _schema;\n    }\n\n    /**\n     * Retrieves JSON-Schema element for given Path\n     * @param path\n     * @returns {any}\n     */\n    getSchemaForPath(path) {\n        let _id;\n        if (path.indexOf(\"#\") > -1) {\n            const _sp = path.split(\"#\");\n            _id = _sp[0];\n            path = _sp[1];\n        } else {\n            _id = _validators.get(this).path;\n        }\n\n        const _schema = this.getSchemaForKey(_id);\n\n        return walkObject(path, _schema);\n    }\n\n    /**\n     * Validates data against named schema\n     * @param path\n     * @param value\n     * @return {*|void|RegExpExecArray}\n     */\n    validate(path, value) {\n        return _validators.get(this).exec(path, value);\n    }\n\n    /**\n     * Getter for Ajv validation error messages\n     * @return {error[] | null}\n     */\n    get errors() {\n        return _validators.get(this).$ajv.errors || null;\n    }\n\n    /**\n     *\n     * @param to\n     * @returns {Object|Array}\n     */\n    getPath(to) {\n        let _ref = this.model;\n        to = to.replace(/\\/?(properties|items)+\\//g, \".\").replace(/^\\./, \"\");\n        (to.split(\".\")).forEach((step) => {\n            if (_ref[step]) {\n                _ref = _ref[step];\n            }\n        });\n\n        return _ref;\n    }\n\n    /**\n     * Retrieves all Models at given path\n     * @param to\n     * @returns {Array[]|Object[]}\n     */\n    getModelsInPath(to) {\n        const _steps = [this.model];\n        let _ref = this.model;\n        to = to.replace(/\\/?(properties|items)+\\/?/g, \".\");\n        (to.split(\".\")\n            .filter((itm, idx, arr) => arr.indexOf(itm) > -1))\n            .forEach((step) => {\n                if (_ref[step]) {\n                    _steps[_steps.length] = _ref = _ref[step];\n                }\n            });\n        return _steps;\n    }\n\n\n    /**\n     *\n     * @param pipesOrSchemas\n     * @returns {Pipe}\n     */\n    pipeline(...pipesOrSchemas) {\n        return _documents.get(this).pipeline(...pipesOrSchemas);\n    }\n\n\n    /**\n     * Subscribes observer to root Model\n     * @param observer\n     * @returns {Observable}\n     */\n    subscribe(observer) {\n        return _documents.get(this).subscribe(observer);\n    }\n\n    /**\n     * Subscribes observer to Model at path\n     * @param path\n     * @param observer\n     * @returns {Observable}\n     */\n    subscribeTo(path, observer) {\n        return _documents.get(this).subscribeTo(path, observer);\n    }\n\n    /**\n     * Implements toString\n     * @return {string}\n     */\n    toString() {\n        return `${this.model.$model}`;\n    }\n\n    /**\n     * Implements toJSON\n     * @return {*}\n     */\n    toJSON() {\n        return this.model.$model.toJSON();\n    }\n\n    /**\n     * Creates new PropertiesModel from JSON data\n     * @param {string|json} json -- JSON Object or String\n     * @param {object} options - Model options object\n     * @returns {Model}\n     */\n    static fromJSON(json, options) {\n        // quick peek at json param to ensure it looks ok\n        const __ = (typeof json).match(/^(string|object)+$/);\n\n        if (__) {\n            // attempts to create Model from JSON or JSON string\n            return new Model((__[1] === \"string\") ?\n                JSON.parse(json) : json, options);\n        }\n\n        // throws error if something didn't look right with the json param\n        throw new Error(\"json must be either JSON formatted string or object\");\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "_documents",
    "memberof": "src/Model/index.js",
    "static": true,
    "longname": "src/Model/index.js~_documents",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "_getModelClass",
    "memberof": "src/Model/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/index.js~_getModelClass",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/index.js",
    "importStyle": null,
    "description": "returns Items or Properties model class based on type of expected property",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ItemsModel|PropertiesModel|Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ItemsModel",
        "PropertiesModel",
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "Model",
    "memberof": "src/Model/index.js",
    "static": true,
    "longname": "src/Model/index.js~Model",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/index.js",
    "importStyle": "{Model}",
    "description": "RxVo Model Entry-point",
    "lineNumber": 58,
    "interface": false
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "addSchema",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#addSchema",
    "access": "public",
    "description": "Adds Schema to Validator instance",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "useSchema",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#useSchema",
    "access": "public",
    "description": "Selects schema to validate against (advanced option, use wisely)",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "get",
    "name": "model",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#model",
    "access": "public",
    "description": "Getter for root Model",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object|array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "set",
    "name": "model",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#model",
    "access": "public",
    "description": "Setter for root Model value",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 162,
    "kind": "get",
    "name": "schema",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#schema",
    "access": "public",
    "description": "Getter for document's JSON-Schema",
    "lineNumber": 139,
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "freeze",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#freeze",
    "access": "public",
    "description": "Freezes document object",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "isFrozen",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#isFrozen",
    "access": "public",
    "description": "Returns true if object is frozen",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getSchemaForKey",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#getSchemaForKey",
    "access": "public",
    "description": "returns schema with given id",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "getSchemaForPath",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#getSchemaForPath",
    "access": "public",
    "description": "Retrieves JSON-Schema element for given Path",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "validate",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#validate",
    "access": "public",
    "description": "Validates data against named schema",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "void",
        "RegExpExecArray"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 168,
    "kind": "get",
    "name": "errors",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#errors",
    "access": "public",
    "description": "Getter for Ajv validation error messages",
    "lineNumber": 220,
    "return": {
      "nullable": null,
      "types": [
        "error[] ",
        " null"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getPath",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#getPath",
    "access": "public",
    "description": "",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getModelsInPath",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#getModelsInPath",
    "access": "public",
    "description": "Retrieves all Models at given path",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array[]|Object[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array[]",
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "pipeline",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#pipeline",
    "access": "public",
    "description": "",
    "lineNumber": 266,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipe}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipesOrSchemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipe"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#subscribe",
    "access": "public",
    "description": "Subscribes observer to root Model",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Observable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "subscribeTo",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#subscribeTo",
    "access": "public",
    "description": "Subscribes observer to Model at path",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Observable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#toString",
    "access": "public",
    "description": "Implements toString",
    "lineNumber": 294,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/index.js~Model#toJSON",
    "access": "public",
    "description": "Implements toJSON",
    "lineNumber": 302,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/Model/index.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/index.js~Model.fromJSON",
    "access": "public",
    "description": "Creates new PropertiesModel from JSON data",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "- JSON Object or String"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Model options object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/Model/index.test.js",
    "content": "import {Model} from \"./index\"\nimport {basicModel} from \"../../fixtures/PropertiesModel.schemas\";\nimport {default as basicRefs} from \"../../fixtures/basic-refs.schema\";\nimport {default as refsData} from \"../../fixtures/basic-refs.data\";\n\ndescribe(\"Model Instance Test\", () => {\n    let _owner;\n\n    beforeEach(() => {\n        _owner = new Model({schemas: [basicModel]});\n    });\n\n    it(\"expects a valid Model instance\", () => {\n        expect(_owner instanceof Model).toBe(true);\n    });\n\n    it(\"should get it's schema\", () => {\n        expect(_owner.schema).toEqual(basicModel);\n    });\n\n    it(\"should get path elements\", () => {\n        expect(_owner.getSchemaForPath(\"properties/name\")).toEqual({type: \"string\"});\n    });\n\n    it(\"expects Model Instances to create a valid Model Document\", () => {\n        _owner.model = {\n            \"name\": \"test\",\n        };\n\n        expect(`${_owner.model.name}`).toEqual(\"test\");\n    });\n\n    it(\"runs schema validator\", () => {\n        const _owner = new Model({\n            properties:\n                {\n                    id: {type: 'integer'},\n                    name: {type: 'string'},\n                    value: {type: 'integer'},\n                    createdOn: {type: 'string'}\n                },\n        });\n\n        expect(_owner.errors).toBe(null);\n    });\n\n    describe(\"Mixed schemas\", () => {\n        it(\"should allow mixed schemas to be selected and used\", () => {\n            const _owner = new Model({schemas: [basicRefs]});\n            _owner.subscribe({\n                error: (e) => console.log(JSON.stringify(e)),\n            });\n            _owner.model = refsData;\n            expect(_owner.errors).toBe(null);\n            _owner.model.aReference.valueA = \"A String Value\";\n            expect(_owner.errors).toBe(null);\n            expect(_owner.model).toEqual(refsData);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/index.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/Model/itemsModel.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {\n    _object, _schemaHelpers, _oBuilders, _dirtyModels\n} from \"./_references\";\nimport {BaseModel} from \"./base-model\";\nimport {SchemaHelpers} from \"./_schemaHelpers\";\nimport {makeClean, makeDirty, refAtKeyValidation, refValidation} from \"./utils\";\nimport Notifiers from \"./_branchNotifier\";\n\nconst _observerDelegates = new WeakMap();\n\n/**\n * @class ItemsModel\n */\nexport class ItemsModel extends BaseModel {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super(...arguments);\n        _schemaHelpers.set(this, new SchemaHelpers(this));\n        _object.set(this, new Proxy(BaseModel.createRef(this, []), this.handler));\n    }\n\n    /**\n     * getter for object model\n     */\n    get model() {\n        return _object.get(this);\n    }\n\n    /**\n     * setter for object model\n     * @param value\n     */\n    set model(value) {\n        if (!Array.isArray(value)) {\n            return `${this.path} invalid operation`;\n        }\n\n        if (this.isFrozen) {\n            return false;\n        }\n\n        if (refValidation(this, value) !== true) {\n            Notifiers.get(this.owner).sendError(this.jsonPath, this.owner.errors);\n            return `${JSON.stringify(this.owner.errors)}`;\n        }\n\n        if (!this.isDirty) {\n            // marks model as dirty to prevent cascading validation calls\n            makeDirty(this);\n        }\n\n        _oBuilders.get(this.owner).mute(this);\n        _object.set(this, new Proxy(BaseModel.createRef(this, []), this.handler));\n        _observerDelegates.set(this, true);\n\n        try {\n            let cnt = 0;\n            value.forEach((val) => {\n                _object.get(this)[cnt++] = val;\n            });\n        } catch (e) {\n            makeClean(this);\n            _oBuilders.get(this.owner).unmute(this);\n            Notifiers.get(this.owner).sendError(this.jsonPath, e);\n            return `${JSON.stringify(e)}`;\n        }\n\n        makeClean(this);\n\n        if (!this.isDirty) {\n            _oBuilders.get(this.owner).unmute(this);\n            Notifiers.get(this.owner).sendNext(this.jsonPath);\n            _observerDelegates.delete(this);\n        }\n\n        return true;\n    }\n\n    get handler() {\n        return Object.assign(super.handler, {\n            get: (t, idx) => {\n                // TODO: review for removal\n                // if (typeof idx === \"symbol\") {\n                //     idx = `${String(idx)}`;\n                // }\n\n                if (idx === \"length\") {\n                    return t.length;\n                }\n\n                if (idx in Array.prototype) {\n                    // only handle methods that modify the reference array\n                    if ([\"fill\", \"pop\", \"push\", \"shift\", \"splice\", \"unshift\"].indexOf(idx) > -1) {\n                        return applyMethod(this, t, idx);\n                    } else {\n                        return t[idx];\n                    }\n                }\n\n                if (idx === \"$model\") {\n                    return this;\n                }\n\n                return t[idx];\n            },\n            set: (t, idx, value) => {\n                if (idx in Array.prototype) {\n                    // do nothing against proto props\n                    return true;\n                }\n\n                // -- ensures we aren't in a frozen hierarchy branch\n                if (this.isFrozen) {\n                    throw `model path \"${this.path.length ? this.path : \".\"}\" is non-configurable and non-writable`;\n                }\n\n                let _oDel = _observerDelegates.get(this);\n\n                if (refAtKeyValidation(this, \"items\", value) !== true) {\n                    if (_oDel !== void (0)) {\n                        makeClean(this);\n                        Notifiers.get(this.owner).sendError(this.jsonPath, this.owner.errors);\n                    }\n                    return `${JSON.stringify(this.owner.errors)}`;\n                }\n\n                // we set the value on the array with success\n                if ((typeof value) === \"object\") {\n                    let _sH = _schemaHelpers.get(this);\n                    value = _sH.setChildObject(`${this.path}`, value);\n                }\n\n                t[idx] = value;\n                return true;\n            },\n\n            deleteProperty: (t, idx) => {\n                return deleteTrap(this, t, idx);\n            }\n        });\n    }\n\n    /**\n     * Returns length of model array\n     * @returns {number}\n     */\n    get length() {\n        return this.model.length;\n    }\n}\n\n/**\n * Handles Proxy Delete Trap for Array elements\n * @param model\n * @param t\n * @param idx\n * @returns {boolean|string}\n */\nconst deleteTrap = (model, t, idx) => {\n    let _oDel = _observerDelegates.get(model);\n    // creates mock of future Model state for evaluation\n    let _o = [].concat(t);\n    try {\n        // attempts splice method to\n        // remove item at given index index\n        _o.splice(idx, 1);\n    } catch (e) {\n        if (!_oDel) {\n            makeClean(model);\n            Notifiers.get(model.owner).sendError(model.jsonPath, e);\n        }\n        return `${JSON.stringify(e)}`;\n    }\n\n    // validates mock of change state\n    const _res = refValidation(model, _o);\n\n\n    if (_res !== true) {\n        // makes clean and notifies\n        // if not serial operation\n        if (!_oDel) {\n            makeClean(model);\n            Notifiers.get(model.owner).sendError(model.jsonPath, _res);\n        }\n        return JSON.stringify(_res);\n    }\n\n    // applies operation\n    t.splice(idx, 1);\n\n    // flags model as in sync with tree\n    makeClean(model);\n\n    // updates observers\n    Notifiers.get(model.owner).sendNext(model.jsonPath);\n    return true;\n};\n\n/**\n * Handles proxy get for Array proto methods\n * @param model\n * @param t\n * @param idx\n * @returns {function(...[*]=)}\n */\nconst applyMethod = (model, t, idx) => {\n\n    // returns closure analog to referenced method\n    return (...args) => {\n        // mocks current model state\n        const _arr = [].concat(t);\n\n        // applies method to model state\n        const _val = t[idx].apply(_arr, args);\n\n        // validates updated mock\n        const _res = refValidation(model, _arr);\n\n        // in event of validation failure\n        if (_res !== true) {\n            // .. marks model as clean\n            makeClean(model);\n\n            // .. sends notifications\n            Notifiers.get(model.owner).sendError(model.jsonPath,\n                model.owner.errors);\n\n            return false;\n        }\n\n        // model is a kludge to handle updates from proto methods\n        if (model.parent !== null) {\n            // applies change to parent object if model is not root context\n            model.parent.model[model.jsonPath.split(\".\").pop()] = _arr;\n        } else {\n            // applies change to Model instance\n            model.owner.model = _arr;\n        }\n\n        return _val;\n    }\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/itemsModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "_observerDelegates",
    "memberof": "src/Model/itemsModel.js",
    "static": true,
    "longname": "src/Model/itemsModel.js~_observerDelegates",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Model/itemsModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "ItemsModel",
    "memberof": "src/Model/itemsModel.js",
    "static": true,
    "longname": "src/Model/itemsModel.js~ItemsModel",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/itemsModel.js",
    "importStyle": "{ItemsModel}",
    "description": "",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ItemsModel"
      }
    ],
    "interface": false,
    "extends": [
      "src/Model/base-model.js~BaseModel"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/itemsModel.js~ItemsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/itemsModel.js~ItemsModel#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "get",
    "name": "model",
    "memberof": "src/Model/itemsModel.js~ItemsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/itemsModel.js~ItemsModel#model",
    "access": "public",
    "description": "getter for object model",
    "lineNumber": 52,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "set",
    "name": "model",
    "memberof": "src/Model/itemsModel.js~ItemsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/itemsModel.js~ItemsModel#model",
    "access": "public",
    "description": "setter for object model",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "get",
    "name": "handler",
    "memberof": "src/Model/itemsModel.js~ItemsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/itemsModel.js~ItemsModel#handler",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "get",
    "name": "length",
    "memberof": "src/Model/itemsModel.js~ItemsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/itemsModel.js~ItemsModel#length",
    "access": "public",
    "description": "Returns length of model array",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "deleteTrap",
    "memberof": "src/Model/itemsModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/itemsModel.js~deleteTrap",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/itemsModel.js",
    "importStyle": null,
    "description": "Handles Proxy Delete Trap for Array elements",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "applyMethod",
    "memberof": "src/Model/itemsModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/itemsModel.js~applyMethod",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/itemsModel.js",
    "importStyle": null,
    "description": "Handles proxy get for Array proto methods",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(...[*]=)}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(...[*]=)"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/Model/itemsModel.test.js",
    "content": "import {Model} from \"./index\";\nimport {default as deepEqual} from \"deep-equal\";\nimport {\n    stringsCollection,\n    stringsMinMaxCollection,\n    objectCollection, objectCollectionDefaults\n} from \"../../fixtures/ItemsModel.schemas\";\nimport {BaseModel} from \"./base-model\";\nimport {basicCollection} from \"../../fixtures/PropertiesModel.schemas\";\n\ndescribe(\"ItemsModel Class\", function () {\n\n    describe(\"Simple ItemsModel Tests\", () => {\n\n        describe(\"LifeCycle: Instantiation\", () => {\n            let _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [stringsCollection]});\n            });\n\n            it(\"should initialize a schema and a schema object\", () => {\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof BaseModel).toBe(true);\n            });\n\n            it(\"should not initialize a invalid schema and schema object\", () => {\n                let badSchema = Object.assign({}, stringsCollection, {\n                    items: [{type: \"INVALID\"}],\n                });\n                expect(() => new Model({schemas: [badSchema]})).toThrow();\n            });\n        });\n\n        describe(\"ItemsModel LifeCycle: Creation\", () => {\n            let _d, _owner;\n\n            beforeEach(() => {\n                _owner = new Model({schemas: [stringsCollection]});\n            });\n\n            it(\"should populate with valid data and make that data accessible\", (done) => {\n                _d = [\"abc\", \"def\", \"ghi\"];\n                let _cnt = 0;\n                _owner.subscribe({\n                    next: (m) => {\n                        _cnt++;\n                        expect(deepEqual(_owner.model, _d)).toBe(true);\n                    },\n                    error: done,\n                });\n\n                setTimeout(() => {\n                    expect(_cnt).toEqual(1);\n                    done();\n                }, 100);\n\n                _owner.model = _d;\n            });\n\n            it(\"should reject invalid data and leave model pristine\", () => {\n                _d = [99, 100, 101];\n\n                _owner.model = _d;\n                expect(_owner.model.length).toEqual(0);\n            });\n        });\n    });\n\n    describe(\"Nested Elements Tests\", () => {\n\n        describe(\"LifeCycle: Instantiation\", () => {\n            let _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [objectCollection]});\n            });\n\n            it(\"should initialize a valid schema and a schema object\", () => {\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof BaseModel).toBe(true);\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof BaseModel).toBe(true);\n            });\n        });\n\n        describe(\"ItemsModel LifeCycle: Nested Create\", () => {\n            let _d, _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [objectCollection]});\n            });\n\n            it(\"should populate with valid data and make that data accessible\", (done) => {\n                _d = [{\n                    name: \"Item A\",\n                    value: 1,\n                }, {\n                    name: \"Item B\",\n                }, {\n                    name: \"Item C\",\n                    value: 2,\n                }];\n\n                let _cnt = 0;\n\n                _owner.subscribe({\n                    next: (m) => {\n                        _cnt++;\n                    },\n                    error: done,\n                });\n\n                setTimeout(() => {\n                    expect(_cnt).toEqual(1);\n                    done();\n                }, 100);\n\n                _owner.model = _d;\n                // expect(deepEqual(_owner.model, _d)).toBe(true);\n            });\n\n            it(\"should reject invalid data and leave model pristine\", () => {\n                _d = [{\n                    name: 123,\n                    value: 1,\n                }, {\n                    value: \"Item B\",\n                }, {\n                    value: 2,\n                }];\n\n                _owner.model = _d;\n                expect(typeof _owner.errors).toBe(\"object\");\n                expect(deepEqual(_owner.model, [])).toBe(true);\n            });\n        });\n\n        describe(\"LifeCycle: Update\", () => {\n\n            let _d, _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [objectCollection]});\n            });\n\n            it(\"should update nested models with valid data and pass validation\", () => {\n                _d = [{\n                    name: \"Item A\",\n                    value: 1,\n                }, {\n                    name: \"Item B\",\n                }, {\n                    name: \"Item C\",\n                    value: 2,\n                }];\n\n                _owner.model = _d;\n\n                _owner.model[1] = {\n                    name: \"Item B\",\n                    value: 3\n                };\n\n                expect(_owner.errors).toBe(null);\n                expect(_owner.model[1]).toEqual({name: \"Item B\", value: 3});\n            });\n\n            it(\"should updated properties in nested objects with valid data and pass validation\", () => {\n                _d = [{\n                    name: \"Item A\",\n                    value: 1,\n                }, {\n                    name: \"Item B\",\n                }, {\n                    name: \"Item C\",\n                    value: 2,\n                }];\n\n                _owner.model = _d;\n\n                _owner.model[1].value = 3;\n\n\n                expect(_owner.errors).toBe(null);\n                expect(_owner.model[1]).toEqual({name: \"Item B\", value: 3});\n            });\n        });\n\n        describe(\"LifeCycle: Delete\", () => {\n            let _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [stringsCollection]});\n            });\n\n            let _d = [\"Item A\", \"Item B\", \"Item C\"];\n\n            it(\"should allow deletion of nested properties that are not required\", () => {\n                _owner.model = _d;\n                delete _owner.model[1];\n                expect(_owner.errors).toBe(null);\n                expect(_owner.model.length).toBe(2);\n            });\n\n            it(\"should prevent deletion of nested properties that are required\", () => {\n                _owner.model = _d;\n                delete _owner.model[0];\n                delete _owner.model[1];\n                delete _owner.model[2];\n                expect(typeof _owner.errors).toBe(\"object\");\n                expect(_owner.model.length).toBe(1);\n            });\n        });\n\n        describe(\"LifeCycle: Reset\", () => {\n            let _owner;\n            beforeEach(() => {\n                _owner = new Model({schemas: [objectCollection]});\n            });\n\n            it(\"should notify subsequent validations\", (done) => {\n                const _d = [{\n                    name: \"Item A\",\n                    value: 1,\n                }, {\n                    name: \"Item B\",\n                }, {\n                    name: \"Item C\",\n                    value: 2,\n                }];\n\n                _owner.model = _d;\n\n                setTimeout(() => {\n                    _owner.subscribe({\n                        next: (m) => {\n                            expect(m.model.length).toEqual(3);\n                            done()\n                        },\n                        error: done,\n                    });\n\n                    _owner.model = [{\n                        name: \"Item D\",\n                        value: 1,\n                    }, {\n                        name: \"Item E\",\n                        value: 2,\n                    }, {\n                        name: \"Item F\",\n                        value: 3,\n                    }];\n                }, 100);\n            });\n        });\n\n\n    });\n\n    describe(\"Array Prototype method tests\", () => {\n        let _owner;\n        beforeEach(() => {\n            _owner = new Model({schemas: [stringsMinMaxCollection]});\n            _owner.model = [\"Item A\", \"Item B\", \"Item C\"];\n        });\n\n        it(\"should fill with validation\", () => {\n            _owner.model.fill([\"Item A\", \"Item B\", \"Item C\", \"Item D\"]);\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(3);\n        });\n\n        it(\"should pop with validation\", () => {\n            _owner.model.pop();\n            _owner.model.pop();\n            _owner.model.pop();\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(1);\n        });\n\n        it(\"should push with validation\", () => {\n            _owner.model.push(\"Item D\");\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(3);\n            expect(_owner.model[2]).toBe(\"Item C\");\n        });\n\n        it(\"should shift with validation\", () => {\n            _owner.model.shift();\n            _owner.model.shift();\n            _owner.model.shift();\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(1);\n        });\n\n        it(\"should splice with validation\", () => {\n            // remove all..\n            _owner.model.splice(0, -1);\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(3);\n            // append element...\n            _owner.model.splice(0, 0, \"Item D\");\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(3);\n        });\n\n        it(\"should unshift with validation\", () => {\n            _owner.model.unshift(\"Item Z\");\n            expect(typeof _owner.errors).toBe(\"object\");\n            expect(_owner.model.length).toBe(3);\n        });\n    });\n\n    describe(\"Default Values\", () => {\n        it(\"should apply defaults to items\", () => {\n            const _owner = new Model({schemas: [objectCollectionDefaults]}, {ajvOptions: {useDefaults: true}});\n            _owner.model = [{}];\n            expect(_owner.model[0]).toEqual({name: \"abc\"});\n        });\n    });\n\n    describe(\"Model Class methods \", () => {\n        let _owner;\n\n        it(\"should not reset if it would invalidate model\", () => {\n            _owner = new Model({schemas: [stringsMinMaxCollection]});\n            _owner.model = [\"Item A\", \"Item B\", \"Item C\"];\n            expect(_owner.model.length).toBe(3);\n            _owner.model.$model.reset();\n            expect(_owner.model.length).toBe(3);\n        });\n\n        it(\"should reset its collection if allowed\", () => {\n            _owner = new Model({schemas: [stringsCollection]});\n            _owner.model = [\"Item A\", \"Item B\", \"Item C\"];\n            expect(_owner.model.length).toBe(3);\n            _owner.model.$model.reset();\n            expect(_owner.model.length).toBe(0);\n        });\n\n        it(\"should quietly validate data with the validate method\", () => {\n            _owner = new Model({schemas: [stringsCollection]});\n            expect(_owner.model.$model.validate([1, 2, 3])).toBe(\"data/0 must be string\");\n            expect(_owner.model.$model.validate([\"1\", \"2\", \"3\"])).toBe(true);\n        });\n\n        it(\"should freeze its model\", () => {\n            _owner = new Model({schemas: [stringsCollection]});\n            _owner.model = [\"Item A\", \"Item B\", \"Item C\"];\n            _owner.model.$model.freeze();\n            expect(_owner.model.$model.isFrozen).toBe(true);\n            _owner.model = [\"1\", \"2\", \"3\"];\n            expect(deepEqual(_owner.model, [\"Item A\", \"Item B\", \"Item C\"])).toBe(true);\n        });\n\n        it(\"should freeze its model hierarchy\", () => {\n            const _orig = [{\n                name: \"My Name\",\n                active: true,\n            }];\n            _owner = new Model({schemas: [basicCollection]});\n            _owner.model = _orig;\n            _owner.model.$model.freeze();\n\n            expect(() => _owner.model[0].name = \"Other Name\")\n                .toThrow(\"model path \\\"root#/items\\\" is non-configurable and non-writable\");\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/itemsModel.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/Model/model-pipes.test.js",
    "content": "import {Model} from \"./index\";\nimport {basicCollection} from \"../../fixtures/PropertiesModel.schemas\";\nimport {default as data} from \"../../fixtures/pipes-test.data\";\n\ndescribe(\"Pipes tests\", () => {\n    describe(\"basic implementation\", () => {\n        let _p;\n        let _vo;\n\n        beforeEach(() => {\n            _vo = new Model({schemas: [basicCollection]});\n            _p = _vo.pipeline(\n                [(itm) => itm.active ? itm : undefined],\n                basicCollection,\n            );\n        });\n\n        it(\"should provide a pipeline\", (done) => {\n            // subscribe to pipeline\n            const _sub = _p.subscribe({\n                next: (d) => {\n                    _sub.unsubscribe();\n                    // data in VO as been filtered by Pipeline\n                    expect(d.length).toEqual(3);\n                    done();\n                },\n                error: (e) => {\n                    _sub.unsubscribe();\n                    done(e);\n                }\n            });\n            // -- write to VO\n            _vo.model = data;\n        });\n    });\n\n    describe(\"nested pipes\", () => {\n        let _p, _vo;\n        beforeEach(() => {\n            _vo = new Model({\n                schemas: [\n                    {\n                        type: \"object\",\n                        properties: {\n                            setA: Object.assign({}, basicCollection, {$id: \"rootA#\"}),\n                            setB: Object.assign({}, basicCollection, {$id: \"rootB#\"}),\n                        }\n                    },\n                ]\n            });\n\n            _vo.model = {\n                setA: [],\n                setB: [],\n            };\n\n            _p = _vo.model.setA.$model.pipeline(\n                [(itm) => {\n                    return itm;\n                }],\n                // basicCollection,\n            );\n        });\n\n        it(\"should provide a discrete pipeline on a given element\", (done) => {\n            // subscribe to pipeline\n            const _sub = _p.subscribe({\n                next: (d) => {\n                    _sub.unsubscribe();\n                    // data in VO as been filtered by Pipeline\n                    expect(d.length).toEqual(3);\n                    done(\"should not be called\");\n                },\n                error: (e) => {\n                    _sub.unsubscribe();\n                    done(e);\n                }\n            });\n\n            // -- write to VO\n            _vo.model.setB = data;\n            setTimeout(() => {\n                done();\n            }, 100);\n        });\n\n        it(\"should only receive on a given element\", (done) => {\n            // subscribe to pipeline\n            const _sub = _p.subscribe({\n                next: (d) => {\n                    _sub.unsubscribe();\n                    // data in VO as been filtered by Pipeline\n                    expect(d).toEqual(data.slice(0,3));\n                    done();\n                },\n                error: (e) => {\n                    _sub.unsubscribe();\n                    done(e);\n                }\n            });\n\n            // -- write to model sub-elements\n            _vo.model.setB = [data[0]];\n            _vo.model.setA = data.slice(0,3);\n        });\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/model-pipes.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/Model/model-rxjs.test.js",
    "content": "import {PropertiesModel} from \"./propertiesModel\";\nimport {Model} from \"./index\";\nimport {basicModel, scoresModel} from \"../../fixtures/PropertiesModel.schemas\";\nimport {_observers, _oBuilders} from \"./_references\";\nimport deepEqual from \"deep-equal\";\n\ndescribe(\"RXJS Test Suite\", () => {\n    describe(\"Basic Notifications\", () => {\n        describe(\"update\", () => {\n            // let _owner;\n            // beforeEach(() => {\n            //     _owner = new Model(basicModel);\n            // });\n            //\n            // afterEach(() => {\n            //     _owner = null;\n            // });\n\n            it(\"should have some tests\", (done) => {\n                const _owner = new Model({schemas: [basicModel]});\n                const _d = {\n                    name: \"A Name\",\n                    age: 99,\n                    active: true,\n                };\n\n                const _sub = _owner.subscribe({\n                    next: (model) => {\n                        _sub.unsubscribe();\n                        expect(deepEqual(model.toJSON(), _d)).toBe(true);\n                        done()\n                    },\n                    error: (e) => {\n                        _sub.unsubscribe();\n                        done(e);\n                    }\n                });\n\n                _owner.model = _d;\n            });\n        });\n    });\n\n    describe(\"Nested Element Notifications\", () => {\n        describe(\"update\", () => {\n            // let _owner;\n\n            beforeEach(() => {\n                // _owner = new Model(scoresModel);\n            });\n\n            afterEach(() => {\n                // _owner = null;\n            });\n\n            it(\"should have some tests\", (done) => {\n                const _owner1 = new Model({schemas: [scoresModel]});\n                _owner1.model = {\n                    name: \"A Game\",\n                    topScores: [{\n                        name: \"Player 1\",\n                        score: 1000000000,\n                    }, {\n                        name: \"Player 2\",\n                        score: 2000000000,\n                    }],\n                };\n\n                let cnt = 0;\n\n                const _sub = _owner1.model.topScores.$model.subscribe({\n                    next: (res) => {\n                        expect(res.length).toBe(3);\n                        _sub.unsubscribe();\n                        done()\n                    },\n                    error: (e) => {\n                        _sub.unsubscribe();\n                        done(JSON.stringify(e));\n                    }\n                });\n\n                _owner1.model.topScores.push({\n                    name: \"Player 3\",\n                    score: 3000000000,\n                });\n\n                // console.log(_owner1.errors);\n\n                // _owner.model.topScores.splice(1, 1, {\n                //     name: \"Player 3\",\n                //     score: 4000000000,\n                // });\n\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/model-rxjs.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/Model/propertiesModel.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {\n    _object, _schemaHelpers,\n} from \"./_references\";\nimport {\n    makeClean, makeDirty,\n    refAtKeyValidation, refValidation,\n} from \"./utils\";\nimport {SchemaHelpers} from \"./_schemaHelpers\";\nimport {BaseModel} from \"./base-model\";\nimport Notifiers from \"./_branchNotifier\";\n\n/**\n * @class PropertiesModel\n */\nexport class PropertiesModel extends BaseModel {\n    /**\n     *\n     */\n    constructor() {\n        super(...arguments);\n\n        // stores SchemaHelpers reference for use\n        _schemaHelpers.set(this, new SchemaHelpers(this));\n\n        // sets Proxy Model reference on map\n        _object.set(this, new Proxy(BaseModel.createRef(this, {}), this.handler));\n    }\n\n    /**\n     * Handler for Object Proxy Evaluation\n     * @returns {{get: function, set: function}}\n     */\n    get handler() {\n        return Object.assign(super.handler, {\n            get: (t, key) => {\n                return key === \"$model\" ? this : t[key];\n            },\n            set: (t, key, value) => {\n                return setHandler(this, t, key, value);\n            },\n            deleteProperty: (t, key) => {\n                return deleteHandler(this, t, key);\n            }\n        });\n    }\n\n    /**\n     * getter for object model\n     */\n    get model() {\n        return _object.get(this);\n    }\n\n    /**\n     * setter for object model\n     * @param value\n     */\n    set model(value) {\n        // fails on attempts to set scalar value\n        // or if this node is locked or fails validation\n        if ((typeof value) !== \"object\" || this.isFrozen) {\n            return false;\n        }\n\n        if (refValidation(this, value) !== true) {\n            Notifiers.get(this.owner).sendError(this.jsonPath, this.owner.errors);\n            return false;\n        }\n\n        if (!this.isDirty) {\n            // marks model as dirty to prevent cascading validation calls\n            makeDirty(this);\n        }\n\n        // defines new Proxy Object for data modeling\n        _object.set(this,\n            new Proxy(BaseModel.createRef(this, {}), this.handler));\n\n        Object.keys(value).forEach((k) => {\n            // -- added try/catch to avoid error in JSFiddle\n            try {\n                this.model[k] = value[k];\n            } catch (e) {\n                // marks model as clean\n                makeClean(this);\n                // sends notifications\n                Notifiers.get(this.owner).sendError(this.jsonPath, e.message);\n                return false;\n            }\n        });\n\n        // setTimeout(() => {\n            // marks model as in sync with tree\n            makeClean(this);\n        // }, 0);\n\n        // calls next's observable to update subscribers\n        if ((this.parent && !this.parent.isDirty) || !this.isDirty) {\n            Notifiers.get(this.owner).sendNext(this.jsonPath);\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {string} key\n     * @returns {any}\n     */\n    get(key) {\n        return this.model[key];\n    }\n\n    /**\n     * sets value to schema key\n     * @param {string|object} key\n     * @param {any} value\n     */\n    set(key, value) {\n        // attempts validation of value against schema\n        if (!refAtKeyValidation(this, key, value)) {\n            return false;\n        }\n\n        if (!this.isDirty) {\n            // marks model as dirty to prevent cascading validation calls\n            makeDirty(this);\n        }\n\n        // applies validated value to model\n        this.model[key] = value;\n\n        // updates observers\n        Notifiers.get(this.owner).sendNext(this.jsonPath);\n\n        // removes dirtiness\n        makeClean(this);\n\n        return this;\n    }\n}\n\n/**\n * Negotiates Key values that are Objects\n * @param model\n * @param key\n * @returns {boolean}\n */\nconst handleObjectKey = (model, key) => {\n    const _sH = _schemaHelpers.get(model);\n    const e = _sH.setObject(key);\n    if (typeof e === \"string\") {\n        makeClean(model);\n        Notifiers.get(model.owner).sendError(model.jsonPath, e);\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Creates Model Child to set up Proxy Object\n * @param model\n * @param key\n * @param value\n * @returns {*}\n */\nconst createModelChild = (model, key, value) => {\n    const _sH = _schemaHelpers.get(model);\n    // calls validate with either full path if in PropertiesModel or key if nested in ItemsModel\n    value = _sH.setChildObject(key, value);\n    if ((typeof value) === \"string\") {\n        // marks model as clean\n        makeClean(model);\n        // sends notifications\n        Notifiers.get(model.owner).sendError(model.jsonPath, value);\n        return false;\n    }\n    return value;\n};\n\n/**\n * Parameter Set trap for Proxy\n * @param model\n * @param t\n * @param key\n * @param value\n * @returns {boolean|string}\n */\nconst setHandler = (model, t, key, value) => {\n    if (key in Object.prototype) {\n        // do nothing against proto props\n        return true;\n    }\n\n    // -- ensures we aren't in a frozen hierarchy branch\n    if (model.isFrozen) {\n        throw `model path \"${model.path.length ? model.path : \".\"}\" is non-configurable and non-writable`;\n    }\n\n    // checks for branch update status\n    if (!model.isDirty) {\n        let _o = Object.assign({}, t);\n        _o[key] = value;\n        // attempts validation of value update\n        if (refValidation(model, _o) !== true) {\n            makeClean(model);\n            Notifiers.get(model.owner).sendError(model.jsonPath, model.owner.errors);\n            return `${JSON.stringify(model.owner.errors)}`;\n        }\n    }\n\n    // if key is type 'object', we will set directly\n    if (typeof key === \"object\") {\n        return handleObjectKey(model, key);\n    }\n\n    if ((typeof value) === \"object\") {\n        if ((value = createModelChild(model, key, value)) === false) {\n            return `${model.path} unable to create child object`;\n        }\n    }\n\n    // performs the operation on Model\n    t[key] = value;\n    return true;\n};\n\n\n/**\n * Parameter Delete trap for Proxy\n * @param model\n * @param t\n * @param key\n * @returns {boolean}\n */\nconst deleteHandler = (model, t, key) => {\n    // creates mock of future model state for evaluation\n    let _o = Object.assign({}, model.model);\n    delete _o[key];\n    const _res = model.validate(_o);\n\n    // validates model with value removed\n    if (_res !== true) {\n        Notifiers.get(model.owner).sendError(model.jsonPath, _res);\n        return _res;\n    }\n\n    // performs delete operation on model\n    delete t[key];\n    return true;\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/propertiesModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "PropertiesModel",
    "memberof": "src/Model/propertiesModel.js",
    "static": true,
    "longname": "src/Model/propertiesModel.js~PropertiesModel",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/propertiesModel.js",
    "importStyle": "{PropertiesModel}",
    "description": "",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "PropertiesModel"
      }
    ],
    "interface": false,
    "extends": [
      "src/Model/base-model.js~BaseModel"
    ]
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44
  },
  {
    "__docId__": 194,
    "kind": "get",
    "name": "handler",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#handler",
    "access": "public",
    "description": "Handler for Object Proxy Evaluation",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{get: function, set: function}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{get: function, set: function}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "get",
    "name": "model",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#model",
    "access": "public",
    "description": "getter for object model",
    "lineNumber": 75,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "set",
    "name": "model",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#model",
    "access": "public",
    "description": "setter for object model",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "get",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#get",
    "access": "public",
    "description": "",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "set",
    "memberof": "src/Model/propertiesModel.js~PropertiesModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Model/propertiesModel.js~PropertiesModel#set",
    "access": "public",
    "description": "sets value to schema key",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "handleObjectKey",
    "memberof": "src/Model/propertiesModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/propertiesModel.js~handleObjectKey",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/propertiesModel.js",
    "importStyle": null,
    "description": "Negotiates Key values that are Objects",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "createModelChild",
    "memberof": "src/Model/propertiesModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/propertiesModel.js~createModelChild",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/propertiesModel.js",
    "importStyle": null,
    "description": "Creates Model Child to set up Proxy Object",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "setHandler",
    "memberof": "src/Model/propertiesModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/propertiesModel.js~setHandler",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/propertiesModel.js",
    "importStyle": null,
    "description": "Parameter Set trap for Proxy",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "deleteHandler",
    "memberof": "src/Model/propertiesModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/propertiesModel.js~deleteHandler",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/propertiesModel.js",
    "importStyle": null,
    "description": "Parameter Delete trap for Proxy",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/Model/propertiesModel.test.js",
    "content": "import {PropertiesModel} from \"./propertiesModel\";\nimport {Model} from \"./index\";\nimport {default as deepEqual} from \"deep-equal\";\nimport {\n    basicModel, nestedModel, nestedModelDefault, nestedPatternModel, patternModel\n} from \"../../fixtures/PropertiesModel.schemas\";\n\ndescribe(\"PropertiesModel Class Suite\", function () {\n    let _owner;\n    describe(\"Simple PropertiesModel Tests\", () => {\n        beforeEach(() => {\n            _owner = new Model({schemas: [basicModel]});\n        });\n\n        describe(\"LifeCycle: Instantiation\", () => {\n            it(\"should initialize a schema and a schema object\", () => {\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof PropertiesModel).toBe(true);\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof PropertiesModel).toBe(true);\n            });\n\n            it(\"should not initialize a invalid schema and schema object\", () => {\n                let badSchema = Object.assign({}, basicModel, {\n                    properties: {\n                        \"bad thing\": {\n                            type: \"INVALID\",\n                        },\n                    },\n                });\n                expect(() => new Model({schemas: [badSchema]})).toThrow();\n            });\n        });\n\n        describe(\"LifeCycle: Creation\", () => {\n\n            let _d;\n\n            it(\"should populate with valid data and make that data accessible\", () => {\n                _d = {\n                    name: \"Ed Testy\",\n                    age: 99,\n                    active: true,\n                };\n\n                _owner.model = _d;\n                expect(deepEqual(_owner.model, _d)).toBe(true);\n            });\n\n            it(\"should reject invalid data and leave model pristine\", () => {\n                _d = {\n                    name: \"Ed Testy\",\n                    age: 99,\n                    active: \"123\",\n                };\n\n                _owner.model = _d;\n                expect(deepEqual(_owner.model, {})).toBe(true);\n            });\n        });\n\n        describe(\"LifeCycle: Update\", () => {\n            const _d = {\n                name: \"Ed Testy\",\n                age: 99,\n                active: true,\n            };\n\n            beforeEach(() => {\n                _owner.model = _d;\n            });\n\n            it(\"should update with valid data\", () => {\n                _owner.model.active = false;\n                expect(deepEqual(_owner.model, _d)).toBe(false);\n            });\n\n            it(\"should reject invalid data update\", () => {\n                _owner.model.active = \"false\";\n                expect(deepEqual(_owner.model, _d)).toBe(true);\n            });\n        });\n    });\n\n    describe(\"Nested PropertiesModel Tests\", () => {\n        let _owner;\n        beforeEach(() => {\n            _owner = new Model({schemas: [nestedModel]});\n        });\n\n        describe(\"LifeCycle: Instantiation\", () => {\n            it(\"should initialize a valid schema and a schema object\", () => {\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof PropertiesModel).toBe(true);\n                expect(_owner.model.$model).toBeDefined();\n                expect(_owner.model.$model instanceof PropertiesModel).toBe(true);\n            });\n        });\n\n        describe(\"LifeCycle: Create\", () => {\n\n            let _d;\n\n            it(\"should populate with valid data and make that data accessible\", () => {\n                _d = {\n                    aObject: {\n                        bObject: {\n                            bValue: 1234,\n                        },\n                    },\n                };\n\n                _owner.model = _d;\n                expect(deepEqual(_owner.model, _d)).toBe(true);\n                expect(_owner.model.aObject.bObject.$model).toBeDefined();\n                expect(_owner.model.aObject.bObject.$model instanceof PropertiesModel).toBe(true)\n            });\n\n            it(\"should reject invalid data and leave model pristine\", () => {\n                _d = {\n                    aObject: {\n                        bObject: {\n                            bValue: \"1234\",\n                        },\n                    },\n                };\n\n                _owner.model = _d;\n                expect(deepEqual(_owner.model, {})).toBe(true);\n            });\n        });\n\n        describe(\"LifeCycle: Update\", () => {\n\n            let _d;\n\n            it(\"should updated nested property models with valid data and pass validation\", () => {\n                _d = {\n                    aObject: {\n                        bObject: {\n                            bValue: 1234,\n                        },\n                    },\n                };\n\n                _owner.model = _d;\n\n                _d = {\n                    bValue: 4321,\n                };\n\n                _owner.model.aObject.bObject = _d;\n                expect(_owner.errors).toBe(null);\n                expect(deepEqual(_owner.model.aObject.bObject, _d)).toBe(true);\n            });\n        });\n\n        describe(\"LifeCycle: Delete\", () => {\n\n            let _d = {\n                aObject: {\n                    bObject: {\n                        bValue: 1234,\n                    },\n                },\n                extraObject: {\n                    someValue: \"test\",\n                },\n            };\n\n            it(\"should allow deletion of nested properties that are not required\", () => {\n                _owner.model = _d;\n                expect(_owner.model.extraObject.someValue).toBe(\"test\");\n                delete _owner.model.extraObject.someValue;\n                expect(_owner.errors).toBe(null);\n                expect(_owner.model.extraObject.someValue).toBe(void(0));\n            });\n\n            it(\"should prevent deletion of nested properties that are required\", () => {\n                _owner.model = _d;\n                expect(_owner.model.aObject.bObject.bValue).toBe(1234);\n                delete _owner.model.aObject.bObject.bValue;\n                expect(typeof _owner.errors).toBe(\"object\");\n                expect(_owner.model.aObject.bObject.bValue).toBe(1234);\n            });\n        });\n    });\n\n    describe(\"Nested Defaults PropertiesModel Tests\", () => {\n        let _owner;\n        beforeEach(() => {\n            _owner = new Model({schemas: [nestedModelDefault]}, {ajvOptions: {useDefaults: true}});\n        });\n\n        it(\"should populate default values\", () => {\n            const _d = {\n                aObject: {\n                    bObject: {},\n                },\n            };\n\n            _owner.model = _d;\n            expect(_owner.model.aObject.bObject.bValue).toBe(123);\n        });\n    });\n\n    describe(\"Pattern Properties\", () => {\n        let _owner;\n        beforeEach(() => {\n            _owner = new Model({schemas: [patternModel]}, {ajvOptions: {useDefaults: true}});\n        });\n\n        it(\"should allow pattern properties\", () => {\n            _owner.model[\"test\"] = \"foo\";\n            expect(`${_owner}`).toEqual(\"{}\");\n            _owner.model[\"name\"] = \"foo\";\n            expect(`${_owner}`).toEqual(\"{\\\"name\\\":\\\"foo\\\"}\");\n        });\n\n        it(\"should accept multiple uses of patternProperty\", () => {\n            _owner.model[\"name\"] = \"foo\";\n            expect(`${_owner}`).toEqual(\"{\\\"name\\\":\\\"foo\\\"}\");\n            _owner.model[\"name\"] = \"bar\";\n            expect(`${_owner}`).toEqual(\"{\\\"name\\\":\\\"bar\\\"}\");\n        });\n\n    });\n\n    describe(\"Nested Pattern Properties\", () => {\n        let _owner;\n        beforeEach(() => {\n            _owner = new Model({schemas: [nestedPatternModel]}, {ajvOptions: {useDefaults: true}});\n        });\n\n        it(\"should allow nested pattern properties\", () => {\n            _owner.model = {name: \"test\", nested: {test1: {foo: \"bar\"}}};\n            expect(`${_owner.model.nested.$model}`).toEqual(\"{\\\"test1\\\":{\\\"foo\\\":\\\"bar\\\"}}\");\n        });\n\n        it(\"should accept multiple uses of patternProperty\", () => {\n            _owner.model = {name: \"test\", nested: {test1: {foo1: \"bar1\"}}};\n            expect(`${_owner.model.nested.$model}`).toEqual(\"{\\\"test1\\\":{\\\"foo1\\\":\\\"bar1\\\"}}\");\n            _owner.model.nested[\"test2\"] = {foo2: \"bar2\"};\n            expect(`${_owner.model.nested.$model}`).toEqual(\"{\\\"test1\\\":{\\\"foo1\\\":\\\"bar1\\\"},\\\"test2\\\":{\\\"foo2\\\":\\\"bar2\\\"}}\");\n        });\n\n        it(\"should reject subsequent invalid uses of patternProperty\", () => {\n            _owner.model = {name: \"test\", nested: {test1: {foo1: \"bar1\"}}};\n            _owner.model.nested[\"test1\"] = false;\n            expect(_owner.errors === null).toBe(false);\n            expect(`${_owner.errors[0].instancePath}`).toEqual(\"/test1\");\n            expect(`${_owner.errors[0].message}`).toEqual(\"must be object\");\n        });\n\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/propertiesModel.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/Model/utils.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_dirtyModels, _validators} from \"./_references\";\nimport merge from \"lodash.merge\";\n\n/**\n * flags `model` node as being out of sync with tree\n * @param {BaseModel} model\n */\nexport const makeDirty = (model) => {\n    _dirtyModels.get(model.owner)[model.path] = true;\n};\n\n/**\n * flags `model` node as being in sync with tree\n * @param {BaseModel} model\n */\nexport const makeClean = (model) => {\n    if (model.isDirty && _dirtyModels.get(model.owner)[model.path]) {\n        delete _dirtyModels.get(model.owner)[model.path];\n    }\n};\n\n/**\n * Performs model data validation against json-schema\n * @private\n * @param {BaseModel} model\n * @param {json|array|boolean|number|string} value\n * @return {boolean|string|object[]}\n */\nexport const refValidation = (model, value) => {\n    return refAtKeyValidation(model, \"\", value);\n};\n\n/**\n * Performs model data validation at KEY against json-schema\n * @param model\n * @param key\n * @param value\n * @return {boolean|string|string[]}\n */\nexport const refAtKeyValidation = (model, key, value) => {\n    // we don't validate if model is dirty\n    if (model.isDirty) {\n        return true;\n    }\n\n    // obtains preliminary model path\n    let path = `${model.validationPath}`;\n\n    if (key && key.length) {\n        path = `${path}/${key}`;\n    }\n\n    return validate(model, path, value);\n};\n\n/**\n *\n * @param model\n * @param path\n * @param value\n * @returns {*}\n */\nexport const validate = (model, path, value) => {\n    // obtains validator reference\n    const _v = _validators.get(model.owner);\n    const _res = _v.exec(path, value);\n    // runs validation and returns result or errors\n    return _res ? true : _v.$ajv.errorsText(_res.errors);\n\n};\n\n/**\n *\n * @param obj\n */\nconst getDefaultsForElement = (obj) => {\n    let _o = {};\n    const _propObj = {};\n\n    if (obj.hasOwnProperty(\"default\")) {\n        merge(_o, obj.default);\n    }\n\n    if (obj.hasOwnProperty(\"type\")) {\n        let _m = obj.type.match(/^(object|array)+$/);\n        if (_m !== null) {\n            let _key = _m[1] === \"object\" ? \"properties\" : \"items\";\n            if (obj.hasOwnProperty(_key)) {\n                return merge(_o, getDefaultsForElement(obj[_key]));\n            }\n        }\n    }\n\n    Object.keys(obj).forEach((prop) => {\n        if (obj[prop].hasOwnProperty(\"default\")) {\n            _o[prop] = obj[prop].default;\n        }\n\n        if ((obj[prop].hasOwnProperty(\"type\"))) {\n            if (obj[prop].type.match(/^(object|array)+$/) !== null) {\n\n                if (obj[prop].hasOwnProperty(\"properties\")) {\n                    _propObj[prop] = getDefaultsForElement(obj[prop].properties)\n                }\n\n                if (obj[prop].hasOwnProperty(\"items\")) {\n                    _propObj[prop] = getDefaultsForElement(obj[prop].items)\n                }\n            }\n        }\n    });\n\n    _o = merge(_o, _propObj);\n\n    delete _o[\"items\"];\n    return Object.keys(_o).length ? _o : null;\n};\n\n/**\n *\n * @param schema\n * @returns {object|null}\n */\nexport const getDefaults = (schema) => {\n    const _o = {};\n\n    if (schema.hasOwnProperty(\"default\")) {\n        merge(_o, schema.default);\n    }\n\n    if (schema.hasOwnProperty(\"properties\")) {\n        merge(_o, getDefaultsForElement(schema.properties));\n    }\n\n    if (schema.hasOwnProperty(\"items\")) {\n        merge(_o, getDefaultsForElement(schema.items));\n    }\n\n    delete _o[\"items\"];\n\n    return Object.keys(_o).length ? _o : null;\n};\n\n/**\n *\n * @param schema\n * @returns {*}\n */\nexport const getPatternPropertyDefaults = (schema) => {\n    let _o = {};\n\n    if (schema === null || schema === void (0)) {\n        return null;\n    }\n\n    if (schema.hasOwnProperty(\"patternProperties\")) {\n        let _propObj = {};\n        Object.keys(schema.patternProperties).forEach((prop) => {\n            merge(_o, getDefaultsForElement(schema.patternProperties));\n        });\n        merge(_o, _propObj);\n    }\n\n    return Object.keys(_o).length ? _o : null;\n};\n\n/**\n * Navigates given object by path\n * @param path\n * @param toWalk\n * @param delimiter\n * @returns {{} & any}\n */\nexport const walkObject = (path, toWalk, delimiter = \"/\") => {\n    let _s = Object.assign({}, toWalk);\n    path.split(delimiter).forEach((part) => {\n        if (part !== \"\") {\n            _s = _s[part];\n        }\n    });\n    return _s;\n};\n\n/**\n * retrieves ID attribute from schema\n * @param schema\n * @returns {string}\n */\nexport const getSchemaID = (schema) => {\n    const id = [\"$id\", \"id\"].filter((id) => schema.hasOwnProperty(id));\n    return id.length ? schema[id[0]] : \"root#\";\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "makeDirty",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~makeDirty",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{makeDirty}",
    "description": "flags `model` node as being out of sync with tree",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "makeClean",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~makeClean",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{makeClean}",
    "description": "flags `model` node as being in sync with tree",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "refValidation",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~refValidation",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{refValidation}",
    "description": "Performs model data validation against json-schema",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "json",
          "array",
          "boolean",
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string",
        "object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "refAtKeyValidation",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~refAtKeyValidation",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{refAtKeyValidation}",
    "description": "Performs model data validation at KEY against json-schema",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string",
        "string[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "validate",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~validate",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{validate}",
    "description": "",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "getDefaultsForElement",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~getDefaultsForElement",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "getDefaults",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~getDefaults",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{getDefaults}",
    "description": "",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "getPatternPropertyDefaults",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~getPatternPropertyDefaults",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{getPatternPropertyDefaults}",
    "description": "",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "walkObject",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~walkObject",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{walkObject}",
    "description": "Navigates given object by path",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{} & any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "toWalk",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "delimiter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{"
      ],
      "spread": false,
      "description": "& any}"
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "getSchemaID",
    "memberof": "src/Model/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Model/utils.js~getSchemaID",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Model/utils.js",
    "importStyle": "{getSchemaID}",
    "description": "retrieves ID attribute from schema",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/Model/utils.test.js",
    "content": "import {\n    makeClean, makeDirty, getDefaults,\n    getPatternPropertyDefaults, validate,\n    refValidation, refAtKeyValidation, walkObject, getSchemaID\n} from \"./utils\";\n\nimport {\n    basicModel, nestedModel,\n    patternModel, nestedPatternModel\n} from \"../../fixtures/PropertiesModel.schemas\";\n\nimport {Model} from \"./index\";\n\ndescribe(\"Utils tests\", () => {\n    describe(\"make dirty and make clean\", () => {\n        describe(\"basic PropertiesModel dirtiness\", () => {\n            const _owner = new Model(basicModel);\n            it(\"should make model dirty\", () => {\n                makeDirty(_owner.model.$model);\n                expect(_owner.model.$model.isDirty).toBe(true);\n            });\n\n            it(\"should make model clean\", () => {\n                makeClean(_owner.model.$model);\n                expect(_owner.model.$model.isDirty).toBe(false);\n            });\n        });\n\n        describe(\"nested PropertiesModel dirtiness\", () => {\n            const _owner = new Model({schemas: [nestedModel]});\n            _owner.model = {\n                aObject: {\n                    bObject: {\n                        bValue: 123,\n                    },\n                },\n            };\n            it(\"should make model dirty\", () => {\n                makeDirty(_owner.model.aObject.bObject.$model);\n                expect(_owner.model.aObject.$model.isDirty).toBe(false);\n                expect(_owner.model.aObject.bObject.$model.isDirty).toBe(true);\n            });\n\n            it(\"should make model clean\", () => {\n                makeClean(_owner.model.aObject.bObject.$model);\n                expect(_owner.model.aObject.bObject.$model.isDirty).toBe(false);\n            });\n        });\n    });\n\n    describe(\"Validation Methods\", () => {\n        describe(\"refValidation tests\", () => {\n            const _owner = new Model({schemas: [basicModel]});\n\n            it(\"should pass validation against refValidation\", () => {\n                const _res = refValidation(_owner.model.$model,\n                    {name: \"test\", age: 99, active: true});\n                expect(_res).toBe(true);\n            });\n\n            it(\"should fail validation against refValidation\", () => {\n                const _res = refValidation(_owner.model.$model,\n                    {name: \"test\", age: \"99\", active: true});\n                expect(_res).toBe(\"data/age must be number\");\n            });\n        });\n\n        describe(\"refAtKeyValidation tests\", () => {\n            const _owner = new Model({schemas: [nestedModel]});\n            const _data = {\n                aObject: {\n                    bObject: {\n                        bValue: 123,\n                    },\n                },\n            };\n            _owner.model = _data;\n            it(\"should pass validation against refValidation\", () => {\n                const _res = refAtKeyValidation(_owner.model.aObject.$model,\n                    \"properties/bObject\", _data.aObject.bObject);\n                expect(_res).toBe(true);\n            });\n\n            it(\"should fail validation against refValidation\", () => {\n                _data.aObject.bObject.bValue = \"123\";\n                const _res = refAtKeyValidation(_owner.model.aObject.$model,\n                    \"properties/bObject\", _data.aObject.bObject);\n                expect(_res).toBe(\"data/bValue must be integer\");\n            });\n        });\n\n        describe(\"validate method\", () => {\n            const _owner = new Model({schemas: [basicModel]});\n            const _data = {name: \"test\", age: 99, active: true};\n            it(\"should pass validation against refValidation\", () => {\n                const _res = validate(_owner.model.$model, \"\", _data);\n                expect(_res).toBe(true);\n            });\n\n            it(\"should fail validation against refValidation\", () => {\n                _data.age = \"99\"\n                const _res = validate(_owner.model.$model, \"\", _data);\n                expect(_res).toBe(\"data/age must be number\");\n            });\n        });\n    });\n\n    describe(\"getDefaults tests\", () => {\n        it(\"should getDefaults from schema\", () => {\n            const _schema = {\n                type: \"object\",\n                properties: {\n                    name: {\n                        type: \"string\",\n                        default: \"a name\",\n                    },\n                },\n            };\n            expect(getDefaults(_schema)).toEqual({name: \"a name\"});\n        });\n\n        it(\"should getDefaults from PatternProperty schema\", () => {\n            const _schema = {\n                type: \"object\",\n                patternProperties: {\n                    \".*\": {\n                        type: \"object\",\n                        default: {\n                            value: \"abcd\",\n                        },\n                    },\n                },\n            };\n            expect(getDefaults(nestedPatternModel)).toEqual(null);\n        });\n    });\n\n    describe(\"getPatternPropertyDefaults tests\", () => {\n        it(\"should get pattern properties for basic Properties element\", () => {\n            expect(getPatternPropertyDefaults(patternModel))\n                .toEqual({\"[^name]\": {\"value\": \"default value\"}});\n        });\n\n        it(\"should get pattern properties for Nested Properties element\", () => {\n            expect(getPatternPropertyDefaults(nestedPatternModel)).toEqual(null);\n            expect(getPatternPropertyDefaults(nestedPatternModel.properties.nested))\n                .toEqual({\".*\": {\"value\": \"default value\"}});\n        })\n    });\n\n    describe(\"walkObject test\", () => {\n        it(\"should walk object\", () => {\n            const _obj = {a: {b: {c: {val: \"string\"}}}};\n            expect(walkObject(\"a/b/c\", _obj)).toEqual({val: \"string\"});\n            // with delimiter\n            expect(walkObject(\"a.b.c\", _obj, \".\")).toEqual({val: \"string\"});\n        });\n    });\n    describe(\"getSchemaId test\", () => {\n        it(\"should get schema id\", () => {\n            expect(getSchemaID({id: \"schema1#\"})).toEqual(\"schema1#\");\n            expect(getSchemaID({$id: \"schema2#\"})).toEqual(\"schema2#\");\n            expect(getSchemaID({})).toEqual(\"root#\");\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Model/utils.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/Pipeline/Executor.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {wrapCallback} from \"./Utils\";\n\nexport class Executor {\n    /**\n     *\n     * @param callbacks\n     * @param data\n     * @returns {*}\n     * @private\n     */\n    static exec(callbacks, data) {\n        let _value;\n        const _it = _cbIterator(callbacks);\n        let _done = false;\n        _value = data;\n        while (!_done) {\n            let {done, value} = _it.next(_value);\n            if (!(_done = done)) {\n                _value = value;\n            }\n        }\n\n        return _value;\n    };\n}\n\n/**\n * Promise-safe callback iterator for pipeline transactions\n * @param callbacks\n * @returns {{next: (function(*=): *)}}\n * @private\n */\nconst _cbIterator = (callbacks) => {\n    let _idx = -1;\n    if (Array.isArray(callbacks[0])) {\n        callbacks = callbacks[0];\n    }\n\n    return {\n        next: (data) => {\n            return (_idx++ < (callbacks.length - 1)) ? {\n                value: (wrapCallback(callbacks[_idx] || ((__) => __)))(data),\n                done: false,\n            } : {\n                value: data || false,\n                done: true,\n            };\n        },\n    };\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Executor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "Executor",
    "memberof": "src/Pipeline/Executor.js",
    "static": true,
    "longname": "src/Pipeline/Executor.js~Executor",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Executor.js",
    "importStyle": "{Executor}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "exec",
    "memberof": "src/Pipeline/Executor.js~Executor",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Executor.js~Executor.exec",
    "access": "private",
    "description": "",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callbacks",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "_cbIterator",
    "memberof": "src/Pipeline/Executor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Executor.js~_cbIterator",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Executor.js",
    "importStyle": null,
    "description": "Promise-safe callback iterator for pipeline transactions",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{next: (function(*=): *)}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callbacks",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{next: (function(*=): *)}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/Pipeline/Iterator.js",
    "content": "import {Pipeline} from \"./Pipeline\";\n\nconst _iterators = new WeakMap();\nconst _pipes = new WeakMap();\n\nexport class Iterator {\n    constructor(...pipesOrSchemas) {\n        const _pipe = new Pipeline(...pipesOrSchemas);\n        _pipes.set(this, _pipe);\n        _iterators.set(this, [...pipesOrSchemas]);\n    }\n\n    get schema() {\n        return _pipes.get(this).schema;\n    }\n\n    loop(records) {\n        if (!Array.isArray(records)) {\n            throw {\n                error: {\n                    message: \"iterators accept iterable values only\"\n                },\n                data: records,\n            }\n        }\n\n        let _res = [];\n        records.forEach(\n            (__) => {\n                const _it = _pipes.get(this).yield(__);\n                let _done = false;\n                let _value = __;\n                while (!_done) {\n                    try {\n                        let {done, value} = _it.next(_value);\n                        if (!(_done = done)) {\n                            _value = value;\n                        }\n                    } catch (e) {\n                        _value = void 0;\n                    }\n                }\n\n                if (_value !== void 0) {\n                    _res[_res.length] = _value;\n                }\n            });\n\n        return _res;\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Iterator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "_iterators",
    "memberof": "src/Pipeline/Iterator.js",
    "static": true,
    "longname": "src/Pipeline/Iterator.js~_iterators",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Iterator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "_pipes",
    "memberof": "src/Pipeline/Iterator.js",
    "static": true,
    "longname": "src/Pipeline/Iterator.js~_pipes",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Iterator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "Iterator",
    "memberof": "src/Pipeline/Iterator.js",
    "static": true,
    "longname": "src/Pipeline/Iterator.js~Iterator",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Iterator.js",
    "importStyle": "{Iterator}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/Iterator.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Iterator.js~Iterator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 225,
    "kind": "get",
    "name": "schema",
    "memberof": "src/Pipeline/Iterator.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Iterator.js~Iterator#schema",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "loop",
    "memberof": "src/Pipeline/Iterator.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Iterator.js~Iterator#loop",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "records",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/Pipeline/Iterator.test.js",
    "content": "import {Iterator} from \"./Iterator\";\nimport {default as DefaultVO} from \"../schemas/default-pipe-vo.schema\";\nimport {Pipeline} from \"./Pipeline\";\n\ndescribe(\"TxIterator Tests\", () => {\n    it(\"should provide a schema\", () => {\n        const _voSchema = JSON.stringify(DefaultVO);\n        const _schemas = (new Iterator((_) => _ * 2)).schema;\n        expect(JSON.stringify(_schemas[0])).toEqual(_voSchema);\n        expect(JSON.stringify(_schemas[1])).toEqual(_voSchema);\n    });\n    it(\"should loop on array\", () => {\n        const _ = (\n            new Iterator((_) => _ * 2)\n        ).loop([1, 3, 5]);\n        expect(`${_}`).toEqual(\"2,6,10\");\n    });\n    it(\"should error on value that are not iterable\", () => {\n        const __ = new Iterator((_) => _ * 2);\n        expect(() => __.loop({0: 1, 1: 3, 2: 5})).toThrow();\n    });\n    it(\"should iterate a schema\", () => {\n        const __ = (\n            new Iterator({type: \"number\"})\n        );\n        expect(__.loop([1, 3, 5])).toEqual([1, 3, 5]);\n        expect(__.loop([1, \"3\", 5])).toEqual([1, 5]);\n    });\n    it(\"should work within pipeline\", (done) => {\n        const _cb = jest.fn();\n        const _tx = new Pipeline(\n            new Iterator( {exec: (d) => d.active === true ? d : void 0}),\n        );\n\n        _tx.subscribe({\n            next: (d) => {\n                expect(d.length).toEqual(2);\n                done();\n            },\n            error: ((e) => {\n                _cb();\n            }),\n        });\n\n        _tx.write([\n            {name: \"sam\", age: 25, active: true},\n            {name: \"fred\", age: 20, active: true},\n            {name: \"alice\", age: 30, active: false},\n        ]);\n    })\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Iterator.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "src/Pipeline/Pipe-api.test.js",
    "content": "import {Validator} from \"./Validator\";\nimport {Pipeline} from \"./Pipeline\";\nimport {basicCollection} from \"../../fixtures/PropertiesModel.schemas\";\nimport {default as data} from \"../../fixtures/pipes-test.data\";\nimport {default as _pipesOrSchemas} from \"../../fixtures/pipes-or-schema\";\n\nconst _schemaDef = {\n    \"schemas\": [\n        {\n            \"$id\": \"http://api-hero.webfreshener.com/v1/namespace.json#\",\n            \"type\": \"object\",\n            \"required\": [\n                \"basePath\"\n            ],\n            \"properties\": {\n                \"basePath\": {\n                    \"type\": \"string\",\n                },\n                \"servers\": {\n                    \"type\": \"object\"\n                },\n                \"options\": {\n                    \"type\": \"object\"\n                },\n                \"operations\": {\n                    \"$ref\": \"#/definitions/Operations\"\n                }\n            },\n            \"definitions\": {\n                \"Operations\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/OperationItem\"\n                    }\n                },\n                \"OperationItem\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"operationId\",\n                        \"method\",\n                        \"path\"\n                    ],\n                    \"additionalProperties\": false,\n                    \"properties\": {\n                        \"operationId\": {\n                            \"type\": \"string\"\n                        },\n                        \"method\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"delete\",\n                                \"get\",\n                                \"head\",\n                                \"options\",\n                                \"patch\",\n                                \"post\",\n                                \"put\"\n                            ]\n                        },\n                        \"path\": {\n                            \"type\": \"string\"\n                        },\n                        \"request\": {\n                            \"type\": \"object\"\n                        },\n                        \"responses\": {\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"$id\": \"http://api-hero.webfreshener.com/v1/namespace/operations.json#\",\n            // \"$schema\": \"http://api-hero.webfreshener.com/v1/namespace.json#\",\n            \"allOf\": [\n                {\n                    \"required\": [\n                        \"elementClass\",\n                        \"target\"\n                    ],\n                    \"properties\": {\n                        \"elementClass\": {\n                            \"type\": \"object\"\n                        },\n                        \"target\": {\n                            \"type\": \"object\"\n                        }\n                    }\n                },\n                {\n                    \"$ref\": \"http://api-hero.webfreshener.com/v1/namespace.json#/definitions/Operations\"\n                }\n            ]\n        }\n    ],\n    \"use\": \"http://api-hero.webfreshener.com/v1/namespace/operations.json#\"\n};\n\ndescribe(\"Pipeline API Tests\", () => {\n    let _p;\n    beforeEach(() => {\n        _p = new Pipeline(..._pipesOrSchemas);\n    });\n\n    describe(\"Pipeline Schema\", () => {\n        it(\"should accept schema\", () => {\n            expect(\n                () => (new Pipeline(basicCollection))\n            ).not.toThrow();\n        });\n\n        it(\"should accept schema config\", () => {\n            expect(\n                () => (new Pipeline(_schemaDef))\n            ).not.toThrow();\n        });\n    });\n\n    describe(\"Pipeline exec\", () => {\n        it(\"should not be an observable\", (done) => {\n            const _p = new Pipeline(..._pipesOrSchemas);\n            _p.subscribe({\n                next: () => {\n                    done(\"should not be observable if called with exec\");\n                },\n                error: () => {\n                    done(\"should not be observable if called with exec\");\n                }\n            });\n\n            expect(_p.exec(data).length).toEqual(3);\n            expect(Object.keys(_p.tap()).length).toEqual(0);\n            setTimeout(() => done(), 10);\n        });\n\n        it(\"should not be a promise\", () => {\n            expect(_p.exec(data).then).toBeUndefined();\n        });\n\n        it(\"should throw\", () => {\n            const _p = new Pipeline(..._pipesOrSchemas);\n            try {\n                _p.exec(\"invalid value\");\n            } catch (e) {\n                expect(e.error[0].message).toEqual(\"must be array\");\n            }\n        });\n    });\n\n    it(\"should send error notification if a pipeline returns false\", (done) => {\n        const _p = new Pipeline(\n            ...[\n                ..._pipesOrSchemas,\n                {\n                    exec: () => false,\n                }\n            ]\n        );\n\n        const _sub = _p.subscribe({\n            next: () => {\n                _sub.unsubscribe();\n                done(\"pipeline should not have sent next notification\");\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                expect(e.error[0].message).toEqual(\"must be array\");\n                expect(JSON.stringify(e.data)).toEqual(JSON.stringify(data[0]));\n                done();\n            },\n        });\n\n        _p.write(data[0]);\n    });\n\n    it(\"should provide errors\", (done) => {\n        const _p = new Pipeline(\n            {type: \"boolean\"});\n        const _sub = _p.subscribe({\n            next: () => {\n                _sub.unsubscribe();\n                done(\"pipeline should have errored\");\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                expect(e.error !== void 0).toBe(true);\n                done();\n            }\n        });\n\n        _p.write(data[0]);\n    });\n\n    it(\"should split pipeline\", (done) => {\n        const _config = [\n            {\n                exec: (d) => {\n                    return d.map((m) => Object.assign(m, {name: `${m.name} RENAMED`}))\n                },\n            },\n            {\n                exec: (d) => d.map((m) => Object.assign(m, {age: 99})),\n            },\n        ];\n\n        // const _cb = jest.fn();\n        let _cnt = 0;\n        _p = new Pipeline({\n            exec: (d) => d\n        });\n\n        _p.subscribe({\n            error: done,\n        });\n\n        const _split = _p.split(_config);\n        expect(_split.length).toEqual(2);\n\n        _split.forEach((pipe) => {\n            const _sub = pipe.subscribe({\n                next: () => {\n                    _cnt++;\n                    _sub.unsubscribe();\n                },\n                error: (e) => {\n                    _sub.unsubscribe();\n                    throw e;\n                }\n            });\n        });\n\n        _p.write(data);\n\n        setTimeout(() => {\n            // expect(_cb).toHaveBeenCalledTimes(2);\n            expect(_cnt).toEqual(2);\n            expect(_split[0].tap()[0].name.match(/.*\\sRENAMED+$/)).toBeTruthy();\n            expect(_split[1].tap()[0].age).toEqual(99);\n            done();\n        }, 50);\n    });\n\n    it(\"should exec multiple pipes inline\", (done) => {\n        const _p1 = new Pipeline(\n            basicCollection,\n            (d) => d.map((m) => Object.assign(m, {name: `${m.name} RENAMED`}))\n        );\n\n        const _p2 = new Pipeline(\n            basicCollection,\n            (d) => d.map((m) => Object.assign(m, {age: 99}))\n        );\n\n        const _inline = _p.pipe(_p1, _p2);\n\n        _inline.subscribe({\n            next: (d) => {\n                expect(d.length).toEqual(data.length);\n                expect(d[data.length - 1].name.match(/.*\\sRENAMED+$/)).toBeTruthy();\n                expect(d[data.length - 1].age).toEqual(99);\n                expect(1).toBeTruthy();\n            },\n            error: done,\n        });\n\n        _inline.write(data);\n\n        setTimeout(() => {\n            expect(_inline.tap().length).toEqual(data.length);\n            expect(_inline.tap()[data.length - 1].name.match(/.*\\sRENAMED+$/)).toBeTruthy();\n            expect(_inline.tap()[data.length - 1].age).toEqual(99);\n            expect(1).toBeTruthy();\n            done();\n            _inline.close();\n        }, 50);\n\n    });\n\n    test(\"pipe\", (done) => {\n        const _pipe = new Pipeline(\n            basicCollection,\n            (d) => d.map((m) => Object.assign(m, {name: `${m.name} RENAMED`}))\n        );\n\n        _pipe.pipe((d) => d).subscribe({\n            next: () => done(),\n            error: done,\n        });\n\n        _pipe.write(data);\n    });\n\n    test(\"yield\", () => {\n        const _pOS = [\n            {\n                exec: () => \"foo\",\n            },\n            new Pipeline({\n                exec: () => \"bar\",\n            }),\n            {\n                exec: () => \"baz\",\n            },\n        ];\n\n        const _ = (new Pipeline(..._pOS)).yield(data);\n\n        expect(_.next().value).toBe(\"foo\");\n        expect(_.next().value).toBe(\"bar\");\n        expect(_.next().value).toBe(\"baz\");\n        expect(_.next().done).toBe(true);\n    });\n\n    it(\"pipeline should pipeline\", (done) => {\n        const _tx = new Pipeline();\n\n        _tx.subscribe({\n            next: (d) => {\n                expect(d).toEqual(data);\n                done();\n            },\n            error: (e) => {\n                done(e);\n            }\n        });\n\n        _tx.write(data);\n    });\n\n    describe(\"throttle/unthrottle\", () => {\n        test(\"throttle\", (done) => {\n            let _cnt = 0;\n            const rate = 150;\n            const _sub = _p.throttle(rate).subscribe(() => _cnt++);\n            data.forEach((d) => {\n                _p.write([d]);\n            });\n\n            expect(_p.errors).toEqual(null);\n\n            const _ivl = setInterval(() => {\n                clearInterval(_ivl);\n\n                if (_cnt !== data.length) {\n                    done(`Throttled Pipeline did not send all data.\\nExpected: ${data.length}\\nReceived: ${_cnt}`);\n                }\n\n                expect(_p.tap().length).toEqual(1);\n                expect(_p.tap()[0].hasOwnProperty(\"name\")).toBeTruthy();\n                expect(_p.tap()[0].name).toEqual(data[data.length - 1].name);\n                _sub.unsubscribe();\n                done();\n            }, (data.length * rate) + 20);\n        });\n\n        test(\"throttle reset\", (done) => {\n            let _cnt = 0;\n            const rate = 150;\n            const _sub = _p.throttle(rate).subscribe(() => {\n                _p.throttle(0);\n                _cnt++\n            });\n\n            data.forEach((d) => {\n                _p.write([d]);\n            });\n\n            expect(_p.errors).toEqual(null);\n\n            const _ivl = setInterval(() => {\n                clearInterval(_ivl);\n\n                if (_cnt !== data.length) {\n                    done(`Pipeline did not release all data after throttle reset.\\nExpected: ${data.length}\\nReceived: ${_cnt}`);\n                }\n\n                _sub.unsubscribe();\n                done();\n            }, rate + 20);\n        });\n\n        test(\"throttle reset discard cache\", (done) => {\n            let _cnt = 0;\n            const rate = 150;\n            const _sub = _p.throttle(rate).subscribe(() => {\n                _p.throttle(-1);\n                _cnt++;\n            });\n\n            data.forEach((d) => {\n                _p.write([d]);\n            });\n\n            expect(_p.errors).toEqual(null);\n\n            const _ivl = setInterval(() => {\n                clearInterval(_ivl);\n\n                if (_cnt !== 1) {\n                    done(`Pipeline did not discard cached data after throttle reset.\\nExpected: 1\\nReceived: ${_cnt}`);\n                }\n\n                _sub.unsubscribe();\n                done();\n            }, rate * data.length);\n        });\n\n        test(\"unthrottle\", (done) => {\n            const _pipe = new Pipeline(..._pipesOrSchemas);\n            let _cnt = 0;\n            const rate = 150;\n            const _sub = _pipe.throttle(rate).subscribe({\n                next: (d) => {\n                    _pipe.unthrottle();\n                    _cnt++;\n                },\n                error: done,\n            });\n\n            data.forEach((d) => {\n                _pipe.write([d]);\n            });\n\n            const _ivl = setInterval(() => {\n                clearInterval(_ivl);\n                expect(_cnt).toEqual(6);\n                done();\n            }, rate + 10);\n\n        });\n\n        test(\"unthrottle discard cache\", (done) => {\n            const _pipe = new Pipeline(..._pipesOrSchemas);\n            let _cnt = 0;\n            const rate = 150;\n            const _sub = _pipe.throttle(rate).subscribe({\n                next: () => {\n                    _pipe.unthrottle(true);\n                    _cnt++;\n                },\n                error: done,\n            });\n\n            data.forEach((d) => {\n                _pipe.write([d]);\n            });\n\n            const _ivl = setInterval(() => {\n                clearInterval(_ivl);\n                expect(_cnt).toEqual(1);\n                _sub.unsubscribe();\n                done();\n            }, rate + 10);\n\n        });\n    });\n\n    test(\"sample\", () => {\n        const _cb = jest.fn();\n        _p.sample(3).subscribe({\n            next: () => _cb(),\n            error: console.log,\n        });\n\n        data.slice(0, 4).forEach((m) => {\n            _p.write([m]);\n        });\n\n        expect(_cb).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"clone\", () => {\n        let _cnt = 0;\n\n        const _h = () => _cnt++;\n\n        const _sub1 = _p.subscribe(_h);\n\n        const _clone = _p.clone();\n\n        const _sub2 = _clone.subscribe(_h);\n\n        _clone.write(data);\n        expect(_cnt).toEqual(2);\n\n        _cnt = 0;\n\n        _sub1.unsubscribe();\n        _sub2.unsubscribe();\n    });\n\n    describe(\"link / unlink\", () => {\n\n        beforeAll(() => {\n\n        });\n\n        it(\"should link pipeline\", () => {\n\n        });\n\n        it(\"should unlink pipeline\", () => {\n\n        });\n    });\n\n    test(\"should link and unlink pipes\", () => {\n        const _cb = jest.fn();\n        const _TxValidator = new Validator({schemas: [basicCollection]});\n        const _link = new Pipeline(_TxValidator, {schemas: [basicCollection]});\n\n        _p.link(_link, (d) => {\n            _cb();\n            return d;\n        });\n\n        _p.write(data);\n        expect(_p.errors).toEqual(null);\n        expect(_cb).toHaveBeenCalledTimes(1);\n\n        // we capture state for comparison\n        const _state = `${_p}`;\n\n        expect(`${_link}`).toEqual(`${_state}`);\n        expect(`${_link}` === `${_p}`).toBe(true);\n\n        _p.unlink(_link);\n\n        // this will add an item to _p but not to _link\n        _p.write([\n            ..._p.tap(),\n            {\n                name: \"Added Item\",\n                active: true,\n                age: 100,\n            }\n        ]);\n\n        expect(_p.errors).toEqual(null);\n\n        // we expect to discover no further executions and the state to be unchanged\n        expect(_cb).toHaveBeenCalledTimes(1);\n        expect(`${_link}`).toEqual(`${_state}`);\n        expect(`${_link}` === `${_p}`).toBe(false);\n    });\n\n    it(\"should close\", () => {\n        const _cb = jest.fn();\n        const _sub = _p.subscribe({\n            next: () => {\n                // will close on first invocation\n                _p.close();\n                _cb();\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                throw e;\n            },\n        });\n\n        data.forEach((d) => {\n            _p.write(Array.isArray(_p.tap()) ? [..._p.tap(), d] : [d]);\n        });\n\n        expect(_p.errors).toEqual(null);\n        expect(_p.tap().length).toEqual(1);\n        expect(_cb).toHaveBeenCalledTimes(1);\n        expect(_p.writable).toBe(false);\n        _sub.unsubscribe();\n    });\n\n\n    it(\"should merge multiple pipes into a single output\", (done) => {\n        const _vo = {\n            schema: _pipesOrSchemas[0].schema,\n        };\n\n        const _p1 = new Pipeline({\n            schema: _vo.schema,\n            exec: (d) => d.map((m) => Object.assign(m, {name: `${m.name} RENAMED`})),\n        });\n\n        const _p2 = new Pipeline({\n                schema: _vo.schema,\n                exec: (d) => d.map((m) => Object.assign(m, {age: 99}))\n            }\n        );\n\n        const _merged = _p.merge([_p1, _p2], {\n            schema: _vo.schema,\n            exec: (d) => d.map(\n                (m) => Object.assign(m, {active: false})\n            )\n        });\n\n        let _cnt = 0;\n        _merged.subscribe({\n            next: (d) => {\n                if (!_cnt) {\n                    _cnt++;\n                    expect(_merged.tap()[0].name.match(/.*\\sRENAMED+$/)).toBeTruthy();\n                    expect(_merged.tap()[data.length - 1].name.match(/.*\\sRENAMED+$/)).toBeTruthy();\n                    _p2.write(data);\n                } else {\n                    expect(_merged.tap().length).toEqual(data.length);\n                    expect(_merged.tap()[0].age).toEqual(99);\n                    expect(_merged.tap()[data.length - 1].age).toEqual(99);\n                    done();\n                }\n            }\n        });\n\n        _p1.write(data);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Pipe-api.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "_schemaDef",
    "memberof": "src/Pipeline/Pipe-api.test.js",
    "static": true,
    "longname": "src/Pipeline/Pipe-api.test.js~_schemaDef",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Pipe-api.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"schemas\": *, \"use\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/Pipeline/Pipe-exec.js",
    "content": "import {Pipeline} from \"./Pipeline\";\nimport {default as data} from \"../../fixtures/pipes-test.data\";\n\ndescribe(\"Pipeline Exec Tests\", () => {\n\n    it(\"should intake and output data\", (done) => {\n        const _sub = _p.subscribe({\n            next: (d) => {\n                _sub.unsubscribe();\n                expect(`${JSON.stringify(d)}`).toEqual(JSON.stringify(_p.tap()));\n                done();\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                done(e);\n            },\n        });\n        _p.write(data);\n    });\n\n    it(\"should transform data with callback\", (done) => {\n        const _sub = _p.subscribe({\n            next: (d) => {\n                _sub.unsubscribe();\n                expect(d.length).toEqual(3);\n                expect(_p.tap().length).toEqual(3);\n                done();\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                done(e);\n            }\n        });\n\n        _p.write(data);\n    });\n\n    it(\"should not exec until called upon\", (done) => {\n        const _cb = jest.fn();\n        let _cnt = 0;\n        const _p = new Pipeline(\n            async (d) => {\n                return Promise.resolve(d);\n            }\n        );\n\n        const _ivl = setInterval(() => {\n            _p.write(\"ok\");\n        }, 10);\n\n        _p.subscribe({\n            next: () => {\n                // expect(_cb).toBeCalledTimes(1);\n                if (++_cnt === 2) {\n                    clearInterval(_ivl);\n                    done();\n                }\n                console.log(_cnt);\n            },\n            error: (e) => {\n                done(e);\n            }\n        });\n    });\n\n\n    it(\"should stop if a pipeline returns false\", (done) => {\n        const _p = new Pipeline(\n            ...[\n                ..._pipesOrSchemas,\n                {\n                    exec: () => false,\n                }\n            ]\n        );\n\n        const _sub = _p.subscribe({\n            next: () => {\n                _sub.unsubscribe();\n                done(\"pipeline should not have sent next notification\");\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                expect(e.error[0].message).toEqual(\"should be array\");\n                expect(JSON.stringify(e.data)).toEqual(JSON.stringify(data[0]));\n                done();\n            },\n        });\n\n        _p.write(data[0]);\n        setTimeout(done, 200);\n    });\n\n    it(\"should provide errors\", (done) => {\n        const _p = new Pipeline(() => \"an error message\");\n        const _sub = _p.subscribe({\n            next: () => {\n                _sub.unsubscribe();\n                done(\"pipeline should have errored\");\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                expect(e.error !== void 0).toBe(true);\n                done();\n            },\n            complete: () => {\n                done(\"should not have completed\");\n            }\n        });\n\n        _p.write(data[0]);\n    });\n\n\n    it(\"should send error if a pipeline returns string\", (done) => {\n        const _eMsg = \"an important error message for you\";\n        const _p = new Pipeline(\n            _pipesOrSchemas,\n            {\n                exec: () => _eMsg,\n            }\n        );\n        const _sub = _p.subscribe({\n            next: () => {\n                _sub.unsubscribe();\n                done(\"pipeline should not have sent next notification\");\n            },\n            error: (e) => {\n                _sub.unsubscribe();\n                expect(e.error).toEqual(_eMsg);\n                done();\n            },\n        });\n\n        _p.write(data[0]);\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Pipe-exec.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/Pipeline/Pipe.test.js",
    "content": "import {Pipeline} from \"./Pipeline\";\nimport {default as data} from \"../../fixtures/pipes-test.data\";\nimport {TestSubClass} from \"../../fixtures/pipes-instances\";\nimport {default as _pipesOrSchemas} from \"../../fixtures/pipes-or-schema\"\n\ndescribe(\"Pipes Sub-Class Tests\", () => {\n    const _data = {body: \"ok\"};\n    const _res = {body: \"yada-yada\"};\n\n    it(\"should sub class\", () => {\n        const _unit = new Pipeline({\n            exec: () => {\n                return _res\n            },\n        });\n        const _ = new TestSubClass(_unit);\n        expect(_unit.write(_data).tap()).toEqual(_res);\n        expect(_.write(_data).tap()).toEqual(_res);\n    });\n\n});\n\ndescribe(\"TXPipe Error Handling\", () => {\n    it(\"should observe validation errors\", (done) => {\n        const _tx = new Pipeline(\n            (d) => d,\n            {\n                type: \"string\",\n            });\n\n        _tx.subscribe({\n            next: (d) => {\n                done(\"should have errored\");\n            },\n            error: (e) => {\n                expect(e.error.error[0].message).toEqual(\"must be string\");\n                done();\n            }\n        });\n\n        _tx.write(true);\n    });\n\n\n    it(\"should throw validation errors\", () => {\n        const _tx = new Pipeline(\n            (d) => d,\n            {\n                type: \"string\",\n            });\n\n        expect(() => _tx.exec(true)).toThrow();\n    });\n});\n\ndescribe(\"Pipeline Tests\", () => {\n    let _p;\n    beforeEach(() => {\n        _p = new Pipeline(..._pipesOrSchemas);\n    });\n\n    it(\"should work as a Promise\", (done) => {\n        const _p = new Pipeline(..._pipesOrSchemas);\n        _p.promise(data).then((res) => {\n            expect(res.length).toEqual(3);\n            done();\n        }, done).catch(done);\n    });\n\n    it(\"async pipeline should work as observable\", (done) => {\n        const _tx = new Pipeline(\n            async () => {\n                return new Promise((res) => {\n                    setTimeout(\n                        () => res({data: \"ok\"}),\n                        100\n                    );\n                });\n            });\n\n        _tx.subscribe({\n            next: (d) => {\n                expect(d.data).toEqual(\"ok\");\n                done();\n            },\n            error: (e) => {\n                done(e);\n            },\n        });\n\n        _tx.write({});\n    });\n\n    it(\"should remain viable after transaction\", (done) => {\n        let _cnt = 0;\n        const _p = new Pipeline({type: \"string\"});\n\n        _p.subscribe({\n            next: () => {\n                if ((++_cnt) === 2) {\n                    done();\n                }\n            },\n            error: (e) => {\n                console.trace(e);\n                done(e);\n            }\n        });\n\n        _p.write(\"ok\");\n        _p.write(\"ok\");\n    });\n\n    it(\"should iterate with an iterable\", (done) => {\n        const _cb = jest.fn();\n        const _tx = new Pipeline(\n            [{\n                // any object with `loop` creates an iterator\n                exec: (d) => d.active === true ? d : void 0,\n            }],\n            {\n                // any json-schema creates a validator\n                type: \"array\",\n                items: {\n                    type: \"object\",\n                    required: [\"age\"],\n                    properties: {\n                        name: {\n                            type: \"string\",\n                            pattern: \"^[a-zA-Z]{1,24}$\",\n                        },\n                        age: {\n                            type: \"number\",\n                            minimum: 20,\n                            maximum: 100,\n                        },\n                        active: {\n                            type: \"boolean\",\n                        },\n                    },\n                },\n            },\n        );\n\n        _tx.subscribe({\n            next: (d) => {\n                expect(_cb).toHaveBeenCalledTimes(0);\n                expect(d.length).toEqual(2);\n                done();\n            },\n            error: (e) => {\n                done(e);\n            },\n        });\n\n        _tx.write([\n            {name: \"sam\", age: 25, active: true},\n            {name: \"fred\", age: 20, active: true},\n            {name: \"alice\", age: 30, active: false},\n            {name: \"Undefined\", active: null},\n        ]);\n    });\n\n    it(\"should create schema iterator if wrapped in array\", (done) => {\n        const _tx = new Pipeline([{type: \"boolean\"}]);\n        const _data = [true, true, false]\n        _tx.subscribe({\n            next: (d) => {\n                expect(d).toEqual(_data);\n                done();\n            },\n            error: (e) => {\n                done(e);\n            }\n        });\n\n        _tx.write(_data);\n\n    });\n\n    it(\"should be observable\", (done) => {\n        let _ival = 0;\n\n        const _iterator = {\n            next: () => {\n                return (_ival++ < 50) ? {\n                    value: _p.write([data[0]]),\n                    done: false,\n                } : {\n                    value: _p.close(),\n                    done: true,\n                }\n            },\n        };\n\n        _p.subscribe({\n            next: () => {\n                _iterator.next()\n            },\n            error: (e) => done(e),\n            complete: () => {\n                done()\n            },\n        });\n\n        _iterator.next();\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Pipe.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/Pipeline/Pipeline.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {_observers, Validator} from \"./Validator\";\nimport {fill, mapArgs} from \"./Utils\";\nimport {Executor} from \"./Executor\";\nimport {default as DefaultVOSchema} from \"../schemas/default-pipe-vo.schema\";\nimport {Properties} from \"./Properties\";\n\nconst _pipes = new WeakMap();\nconst _cache = new WeakMap();\n\nconst clearPipeInterval = (pipe) => {\n    const _ivl = _pipes.get(pipe).tO;\n    if (_ivl) {\n        clearInterval(_ivl);\n    }\n}\n\n/**\n * Pipeline Class\n */\nexport class Pipeline {\n    static getExecs(..._pvs) {\n        return _pvs.map((_p) => {\n            _p = Array.isArray(_p) ? _p[0] : _p;\n            return (d) => {\n                const _exec = ((typeof _p === \"function\") ? _p : void 0) ||\n                    // is pipeline or implements pipeline api\n                    (_p[\"exec\"]) ||\n                    // is validator or implements validator api\n                    (_p[\"validate\"] ? ((d) => _p[\"validate\"](d) ? d : false) : void 0) ||\n                    // default\n                    ((_) => _);\n                return (_exec).apply(null, [d]);\n            };\n        });\n    }\n\n    /**\n     *\n     * @param pipesOrVOsOrSchemas\n     */\n    constructor(...pipesOrVOsOrSchemas) {\n        _cache.set(this, []);\n\n        // TODO: solve this issue with async methods to remove kludge\n        if (pipesOrVOsOrSchemas[0] instanceof Function) {\n            pipesOrVOsOrSchemas.splice(0, 0, DefaultVOSchema);\n        }\n\n        pipesOrVOsOrSchemas = mapArgs(...pipesOrVOsOrSchemas);\n\n        // stores config & state\n        _pipes.set(this,\n            Properties.init(this, {\n                callbacks: fill(Pipeline.getExecs(...pipesOrVOsOrSchemas)),\n                pipesOrVOsOrSchemas: pipesOrVOsOrSchemas,\n                pipes: _pipes,\n            })\n        );\n\n        // define exec in constructor to ensure method visibility\n        Object.defineProperty(this, \"exec\", {\n            // value: (data) => pipes.get(this).exec(data),\n            value: (data) => {\n                return _pipes.get(this).exec(data);\n            },\n            enumerable: true,\n            configurable: false,\n        });\n    }\n\n    /**\n     * Creates new `pipeline` segment\n     * @param pipesOrSchemas\n     * @returns {Pipeline}\n     */\n    pipe(...pipesOrSchemas) {\n        const __ = new Pipeline(...pipesOrSchemas);\n        this.subscribe({\n            next: (d) => {\n                __.write(d);\n            }\n        });\n        return __;\n    }\n\n    /**\n     * Returns arr\n     * @returns {*[]}\n     */\n    get schema() {\n        return [\n            _pipes.get(this).vo.schema,\n            _pipes.get(this).out.schema\n        ];\n    }\n\n    /**\n     * links pipeline segment to direct output to target pipeline\n     * @param target\n     * @param callbacks function[]\n     * @returns {Pipeline}\n     */\n    link(target, ...callbacks) {\n        if (!(target instanceof Pipeline)) {\n            throw `item for \"target\" was not a Pipe`;\n        }\n\n        // allow for array literal in place of inline assignment\n        if (Array.isArray(callbacks[0])) {\n            callbacks = callbacks[0];\n        }\n\n        callbacks = fill(callbacks || []);\n\n        // creates observer and stores it to links map for `pipeline`\n        const _sub = this.subscribe({\n            next: (data) => {\n                const _res = Executor.exec(callbacks, data.toJSON ? data.toJSON() : data);\n                if (_res instanceof Promise) {\n                    return _res.then((_) => target.write(_));\n                }\n\n                target.write(_res);\n            },\n            error: (e) => {\n                console.error(e);\n            },\n            // handles unlink & cleanup on complete\n            complete: () => this.unlink(target)\n        });\n\n        _pipes.get(this).links.set(target, _sub);\n        return this;\n    }\n\n    /**\n     * Unlink `pipeline` segment from target `pipeline`\n     * @param target\n     * @returns {Pipeline}\n     */\n    unlink(target) {\n        if (!(target instanceof Pipeline)) {\n            throw `item for \"target\" was not a Pipe`;\n        }\n\n        const _sub = _pipes.get(this).links.get(target);\n\n        if (_sub) {\n            _sub.unsubscribe();\n            _pipes.get(this).links.delete(target);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns validation errors\n     * @returns {*|null}\n     */\n    get errors() {\n        return _pipes.get(this).vo.errors || null;\n    }\n\n    /**\n     * Returns JSON-SCHEMA for `pipeline` output\n     * @returns {object}\n     */\n    get schemas() {\n        return [..._pipes.get(this).schemas];\n    }\n\n    /**\n     * Creates array of new `pipeline` segments that run in parallel\n     * @param schemasOrPipes\n     * @returns {*}\n     */\n    split(schemasOrPipes) {\n        return schemasOrPipes.map((_) => this.pipe(_));\n    }\n\n    /**\n     * Iterates pipeline callbacks via generator function\n     * @param data\n     * @returns {generator}\n     */\n    yield(data) {\n        let _fill = _pipes.get(this).pOS.map((_) => _.exec || ((_) => _));\n\n        if (!_fill.length) {\n            _fill[0] = (d) => d;\n        }\n\n        const _f = new Function(\"$scope\", \"$cb\",\n            [\n                \"return (function* (data) { \",\n                \"try {\",\n                Object.keys(_fill)\n                    .map((_) => `yield data=($cb[${_}].bind($scope))(data)`)\n                    .join(\"; \"),\n                \"} catch (e) { $scope.error(e); }\",\n                \"}).bind($scope);\",\n            ].join(\" \")\n        );\n\n        return _f(this, _fill)(data);\n    }\n\n    /**\n     * Merges multiple pipes into single output\n     * @param pipeOrPipes\n     * @param pipeOrSchema\n     * @returns {Pipeline}\n     */\n    merge(pipeOrPipes, pipeOrSchema = {schemas: [DefaultVOSchema]}) {\n        const _out = new Pipeline(pipeOrSchema);\n        _pipes.get(this).listeners = [\n            ..._pipes.get(this).listeners,\n            // -- feeds output of map to listeners array\n            ...(Array.isArray(pipeOrPipes) ? pipeOrPipes : [pipeOrPipes])\n                .filter((_p) => ((typeof _p.subscribe) === \"function\"))\n                .map((_p) => {\n                    _p.subscribe((d) => {\n                        // -- all pipes now write to output tx\n                        _out.write(d.toJSON ? d.toJSON() : d);\n                    });\n                    return _p;\n                })\n        ];\n        // -- returns output tx for observation\n        return _out;\n    }\n\n    /**\n     * Writes data to pipeline segment\n     * @param data\n     * @returns {Pipeline}\n     */\n    write(data) {\n        _pipes.get(this).vo.model = data;\n        return this;\n    }\n\n    /**\n     * Creates clone of current `pipeline` segment\n     * @returns {Pipeline}\n     */\n    clone() {\n        const $ref = _pipes.get(this);\n        const _cz = class extends Pipeline {\n            constructor() {\n                super();\n                _pipes.set(this, $ref);\n                _pipes.get(this).listeners = [...$ref.listeners];\n            }\n        };\n        return new _cz();\n    }\n\n    /**\n     * Terminates input on `pipeline` segment. This is irrevocable\n     * @returns {Pipeline}\n     */\n    close() {\n        _pipes.get(this).out.freeze();\n        return this;\n    }\n\n    /**\n     * Returns write status of `pipeline`\n     * @returns {boolean}\n     */\n    get writable() {\n        return !_pipes.get(this).out.isFrozen;\n    }\n\n    /**\n     * Informs `Pipeline` to rate limit notifications based on time interval\n     * @param rate\n     * @returns {Pipeline}\n     */\n    throttle(rate) {\n        if (rate > 0) {\n            clearPipeInterval(this);\n            const __ = setInterval(\n                () => {\n                    if (_cache.get(this).length) {\n                        const _func = _cache.get(this).splice(0, 1);\n                        if ((typeof _func[0]) === \"function\") {\n                            const _res = _func[0]();\n                            _pipes.get(this).out.model = _res;\n                        }\n                    }\n                }, parseInt(rate, 10)\n            );\n\n            Object.assign(_pipes.get(this), {tO: __});\n        } else if (rate === -1) {\n            this.unthrottle(true);\n        } else {\n            this.unthrottle();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes rate limiting from `Pipeline` and optionally deletes unprocessed cache items\n     * @param discardCacheQueue\n     */\n    unthrottle(discardCacheQueue=false) {\n        clearPipeInterval(this);\n        if (!discardCacheQueue) {\n            _cache.get(this).forEach(() => {\n                const _func = _cache.get(this).splice(0, 1);\n                if ((typeof _func[0]) === \"function\") {\n                    _pipes.get(this).out.model = _func[0]();\n                }\n            });\n        } else {\n            const _c = _cache.get(this);\n            _c.splice(0, _c.length);\n        }\n    }\n\n    /**\n     * Returns product of Nth occurrence of `pipeline` execution\n     * @param nth\n     * @returns {Pipeline}\n     */\n    sample(nth) {\n        _pipes.get(this).ivl = nth;\n        return this;\n    }\n\n    /**\n     * Subscribes to `pipeline` output notifications\n     * @param handler\n     * @returns {Observable}\n     */\n    subscribe(handler) {\n        if (!(typeof handler).match(/^(function|object)$/)) {\n            throw \"handler required for Pipeline::subscribe\";\n        }\n\n        return _pipes.get(this).out.subscribe(handler);\n    }\n\n    /**\n     * Provides current state of `pipeline` output. alias for `toJSON`\n     * @returns {Object|Array}\n     */\n    tap() {\n        return this.toJSON();\n    }\n\n    /**\n     * Convenience Method for Promise based flows.\n     * Writes data to `pipeline` and wraps observer in Promise\n     *\n     * @param data\n     * @returns {Promise<Pipeline>}\n     */\n    async promise(data) {\n        return await new Promise((resolve, reject) => {\n            this.subscribe({\n                next: (d) => {\n                    resolve(d);\n                },\n                error: (e) => {\n                    reject(e);\n                }\n            });\n            this.write(data);\n        });\n    }\n\n    /**\n     * Overrides Object's toString method\n     * @override\n     * @returns {String}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * Provides current state of `pipeline` output.\n     * @override\n     * @returns {Object|Array}\n     */\n    toJSON() {\n        return _pipes.get(this).out.toJSON();\n    }\n}\n\nexport class PipeListener {\n    /**\n     *\n     * @param target\n     */\n    constructor(target, vo) {\n        const _self = this;\n\n        Object.defineProperties(this, {\n            vo: {\n                get: () => vo,\n                enumerable: true,\n                configurable: false,\n                // writable: false,\n            }\n        })\n\n        _pipes.set(this, target);\n        this.vo.subscribe({\n            next: (d) => _self.next(d),\n            error: (e) => _self.error(e),\n            complete: () => _self.complete(),\n        });\n    }\n\n    /**\n     *\n     * @returns {Pipeline}\n     */\n    get target() {\n        return _pipes.get(this);\n    }\n\n    /**\n     *\n     * @returns {Validator}\n     */\n    get vo() {\n        return _pipes.get(_pipes.get(this)).vo;\n    }\n\n    /**\n     *\n     * @returns {Validator}\n     */\n    get out() {\n        return _pipes.get(this.target).out;\n    }\n\n    /**\n     *\n     * @param e\n     */\n    error(e) {\n        // sends error notification through out validator's observable\n        _observers.get(this.out).error(e);\n    }\n\n    /**\n     * closes `pipeline` on complete notification\n     */\n    complete() {\n        this.target.close();\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {Promise<void | never>}\n     */\n    next(data) {\n        // enforces JSON formatting if feature is present\n        data = data && data.toJSON ? data.toJSON() : data;\n        const _targetProps = _pipes.get(this.target);\n        // tests for presence of rate-limit timeout\n        if (_targetProps.tO) {\n            const __ = () => {\n                return _pipes.get(this.target).exec(data);\n            };\n            // caches operation for later execution. Exec ordering is FIFO\n            _cache.get(this.target).splice(_cache.get(this.target).length, 0, __);\n            // cancels current execution\n            return void 0;\n        }\n\n        const _target = _pipes.get(this);\n\n        // tests for interval (ivl)\n        if (_pipes.get(_target).ivl !== 0) {\n            // tics the counter and tests if count is fulfilled\n            if ((++_pipes.get(_target).ivlVal) !== _pipes.get(_target).ivl) {\n                // count is not fulfilled. stops the execution\n                return void 0;\n            } else {\n                // resets the count and lets the operation proceed\n                _pipes.get(_target).ivlVal = 0;\n            }\n        }\n\n        let _t, _type;\n        const _out = (_) => {\n            // else we set the model for validation\n            try {\n                this.out.model = _.toJSON ? _.toJSON() : _;\n            } catch (e) {\n                _observers.get(this.out).error({\n                    error: e,\n                    data: data,\n                });\n            }\n        };\n\n        // capture output of callback\n        try {\n            _t = _pipes.get(this).exec(data); //_pipes.get(_pipes.get(this)).exec(data);\n            _type = typeof _t;\n        } catch (e) {\n            return _observers.get(this.out).error({\n                error: e,\n                data: data,\n            });\n        }\n\n        // tests if object and if object is writable\n        if ((_t instanceof Promise) || ((_type === \"function\") || (_type === \"object\")) && _target.writable) {\n            if (_t instanceof Promise) {\n                return _t.then((_) => {\n                    _out(_)\n                })\n                    .catch((e) => {\n                        _observers.get(this.out).error({\n                            error: e,\n                            data: data,\n                        });\n                    });\n            }\n\n            if (_type === \"function\") {\n                const __ = _t();\n                if (__ instanceof Promise) {\n                    return __.then((_) => {\n                        _out(_)\n                    }).catch((e) => {\n                        _observers.get(this.out).error({\n                            error: e,\n                            data: data,\n                        });\n                    });\n                }\n            }\n        }\n\n        _out(_t);\n    }\n\n    subscribe(handler) {\n        _observers.get(this.out).subscribe(handler);\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Pipeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "_pipes",
    "memberof": "src/Pipeline/Pipeline.js",
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~_pipes",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Pipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "_cache",
    "memberof": "src/Pipeline/Pipeline.js",
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~_cache",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Pipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "clearPipeInterval",
    "memberof": "src/Pipeline/Pipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~clearPipeInterval",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Pipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "pipe",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "Pipeline",
    "memberof": "src/Pipeline/Pipeline.js",
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~Pipeline",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Pipeline.js",
    "importStyle": "{Pipeline}",
    "description": "Pipeline Class",
    "lineNumber": 45,
    "interface": false
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "getExecs",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~Pipeline.getExecs",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "_pvs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipesOrVOsOrSchemas",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "pipe",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#pipe",
    "access": "public",
    "description": "Creates new `pipeline` segment",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipesOrSchemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "schema",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#schema",
    "access": "public",
    "description": "Returns arr",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "link",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#link",
    "access": "public",
    "description": "links pipeline segment to direct output to target pipeline",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callbacks",
        "description": "function[]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "unlink",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#unlink",
    "access": "public",
    "description": "Unlink `pipeline` segment from target `pipeline`",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "get",
    "name": "errors",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#errors",
    "access": "public",
    "description": "Returns validation errors",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|null}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "get",
    "name": "schemas",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#schemas",
    "access": "public",
    "description": "Returns JSON-SCHEMA for `pipeline` output",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "split",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#split",
    "access": "public",
    "description": "Creates array of new `pipeline` segments that run in parallel",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemasOrPipes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "yield",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#yield",
    "access": "public",
    "description": "Iterates pipeline callbacks via generator function",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{generator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "generator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "merge",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#merge",
    "access": "public",
    "description": "Merges multiple pipes into single output",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipeOrPipes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipeOrSchema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "write",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#write",
    "access": "public",
    "description": "Writes data to pipeline segment",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#clone",
    "access": "public",
    "description": "Creates clone of current `pipeline` segment",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "close",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#close",
    "access": "public",
    "description": "Terminates input on `pipeline` segment. This is irrevocable",
    "lineNumber": 288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "get",
    "name": "writable",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#writable",
    "access": "public",
    "description": "Returns write status of `pipeline`",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "throttle",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#throttle",
    "access": "public",
    "description": "Informs `Pipeline` to rate limit notifications based on time interval",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "unthrottle",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#unthrottle",
    "access": "public",
    "description": "Removes rate limiting from `Pipeline` and optionally deletes unprocessed cache items",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "discardCacheQueue",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "sample",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#sample",
    "access": "public",
    "description": "Returns product of Nth occurrence of `pipeline` execution",
    "lineNumber": 355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nth",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#subscribe",
    "access": "public",
    "description": "Subscribes to `pipeline` output notifications",
    "lineNumber": 365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Observable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "tap",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#tap",
    "access": "public",
    "description": "Provides current state of `pipeline` output. alias for `toJSON`",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "promise",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#promise",
    "access": "public",
    "description": "Convenience Method for Promise based flows.\nWrites data to `pipeline` and wraps observer in Promise",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Pipeline>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Pipeline>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#toString",
    "access": "public",
    "description": "Overrides Object's toString method",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Pipeline/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~Pipeline#toJSON",
    "access": "public",
    "description": "Provides current state of `pipeline` output.",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "PipeListener",
    "memberof": "src/Pipeline/Pipeline.js",
    "static": true,
    "longname": "src/Pipeline/Pipeline.js~PipeListener",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Pipeline.js",
    "importStyle": "{PipeListener}",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 262,
    "kind": "get",
    "name": "target",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#target",
    "access": "public",
    "description": "",
    "lineNumber": 450,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Pipeline}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pipeline"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "get",
    "name": "vo",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#vo",
    "access": "public",
    "description": "",
    "lineNumber": 458,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Validator}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "get",
    "name": "out",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#out",
    "access": "public",
    "description": "",
    "lineNumber": 466,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Validator}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "error",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#error",
    "access": "public",
    "description": "",
    "lineNumber": 474,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "complete",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#complete",
    "access": "public",
    "description": "closes `pipeline` on complete notification",
    "lineNumber": 482,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "next",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#next",
    "access": "public",
    "description": "",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void | never>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void | never>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Pipeline/Pipeline.js~PipeListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Pipeline.js~PipeListener#subscribe",
    "access": "public",
    "description": null,
    "lineNumber": 576,
    "undocument": true,
    "params": [
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/Pipeline/Properties.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {Executor} from \"./Executor\";\nimport {Validator} from \"./Validator\";\nimport {default as DefaultVOSchema} from \"../schemas/default-pipe-vo.schema\";\nimport {PipeListener} from \"./Pipeline\";\n\n/**\n *\n */\nexport class Properties {\n    static init(pipe, properties) {\n        const {callbacks, pipesOrVOsOrSchemas, pipes} = properties;\n        const _txP = {};\n\n        const _inPipe = (\n            Array.isArray(pipesOrVOsOrSchemas) && pipesOrVOsOrSchemas.length\n        ) ? pipesOrVOsOrSchemas[0] : pipesOrVOsOrSchemas.length ?\n            pipesOrVOsOrSchemas : {\n                schema: [DefaultVOSchema, DefaultVOSchema],\n                exec: (d) => d,\n            };\n\n        const _pSchemas = [...pipesOrVOsOrSchemas]\n            .filter((_p) => {\n                // filters array for validators and valid schemas\n                return (\n                    // returns true if TxValidator\n                    (_p instanceof Validator) ||\n                    // returns true if has `schema` attribute and is a valid `json-schema`\n                    _p[\"schema\"] && Validator.validateSchemas(_p.schema)\n                );\n            }).map(_ => _.schema);\n\n        const _getInSchema = () => {\n            if (_pSchemas.length) {\n                return (_pSchemas[0] instanceof Validator) ?\n                    _pSchemas[0].schema : _pSchemas[0];\n            }\n            return DefaultVOSchema;\n        };\n\n        const _inSchema = _getInSchema();\n        const _outSchema = _pSchemas.length > 1 ? _pSchemas[_pSchemas.length - 1] : _inSchema;\n\n        if (!_pSchemas.length) {\n            _pSchemas.splice(0, 0, {schemas: [DefaultVOSchema]}, {schemas: [DefaultVOSchema]});\n        }\n\n        const _vo = (_inPipe instanceof Validator) ? _inPipe : new Validator(_inSchema);\n\n        return Object.defineProperties(_txP, {\n            callbacks: {\n                value: callbacks,\n                enumerable: true,\n                configurable: false,\n            },\n            rate: {\n                value: 1,\n                enumerable: true,\n                configurable: true,\n            },\n            links: {\n                value: new WeakMap(),\n                enumerable: true,\n                configurable: false,\n            },\n            exec: {\n                value: (data) => {\n                    try {\n                        return Executor.exec(callbacks, data);\n                    } catch (e) {\n                        throw {\n                            error: e,\n                            data: data,\n                        };\n                        // _observers.get(_txP.out).error({\n                        //     error: e,\n                        //     data: data,\n                        // });\n                    }\n                },\n                enumerable: false,\n                configurable: false,\n            },\n            out: {\n                /**\n                 * validates output\n                 */\n                value: (() => {\n                    const _txV = new Validator(_outSchema);\n                    // unsubscribe all observers on complete notification (freeze/close)\n                    _txV.subscribe({\n                        complete: () => {\n                            (pipes.get(pipe).listeners || []).forEach((_) => {\n                                if (_.unsubscribe) {\n                                    _.unsubscribe();\n                                }\n                            });\n                            pipes.get(pipe).listeners = [];\n                        },\n                    });\n                    return _txV;\n                })(),\n                enumerable: true,\n                configurable: false,\n            },\n            schema: {\n                value: [_inSchema, _outSchema],\n                enumerable: true,\n                configurable: false,\n            },\n            schemas: {\n                // enforces 2 schema minimum (in/out)\n                value: _pSchemas.length < 2 ? [..._pSchemas, ..._pSchemas] : _pSchemas,\n                enumerable: true,\n                configurable: false,\n            },\n            vo: {\n                value: _vo,\n                enumerable: true,\n                configurable: false,\n                writable: false,\n            },\n            pOS: {\n                value: pipesOrVOsOrSchemas,\n                enumerable: false,\n                configurable: false,\n            },\n            listeners: {\n                value: [new PipeListener(pipe, _vo)],\n                enumerable: true,\n                configurable: false,\n                writable: true,\n            },\n            ivl: {\n                value: 0,\n                enumerable: true,\n                configurable: false,\n                writable: true,\n            },\n            ivlVal: {\n                value: 0,\n                enumerable: true,\n                configurable: false,\n                writable: true,\n            },\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Properties.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "Properties",
    "memberof": "src/Pipeline/Properties.js",
    "static": true,
    "longname": "src/Pipeline/Properties.js~Properties",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Properties.js",
    "importStyle": "{Properties}",
    "description": "",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "init",
    "memberof": "src/Pipeline/Properties.js~Properties",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Properties.js~Properties.init",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "pipe",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "src/Pipeline/Utils.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {Iterator} from \"./Iterator\";\nimport {Pipeline} from \"./Pipeline\";\nimport {Validator} from \"./Validator\";\nimport {default as DefaultVOSchema} from \"../schemas/default-pipe-vo.schema\"\n\n/**\n * provides default schema and pass through execution\n * @type {{schema: {$schema: string, $id: string}, exec: (function(*): *)}}\n */\nconst DefaultPipeTx = {\n    schema: DefaultVOSchema,\n    exec: (d) => d,\n};\n\n/**\n * Fills array to enforce 2 callback minimum\n * @param arr\n * @param value\n * @param min\n * @returns {any[]}\n */\nexport const fill = (arr, value = ((d) => d), min = 2) => {\n    arr = [...arr];\n    if (arr.length >= min) {\n        return arr;\n    }\n    return [\n        ...(arr = arr || []),\n        ...(Array(min - arr.length).fill(value, 0))\n    ];\n};\n\n/**\n *\n * @param obj\n * @returns {{exec: function}|Iterator|Pipeline|Validator}\n */\nexport const castToExec = (obj) => {\n    if (!obj) {\n        return DefaultPipeTx;\n    }\n\n    if ((!(obj instanceof Iterator) && !Array.isArray(obj)) && obj[\"loop\"]) {\n        obj = new Iterator(...obj);\n    }\n\n    if (Array.isArray(obj)) {\n        let _k = 0;\n        obj.forEach((o) => {\n            if (Validator.validateSchemas(o)) {\n                obj[_k] = new Validator(o);\n            }\n            _k++;\n        });\n        obj = new Iterator(...obj);\n\n    }\n\n    if (obj instanceof Iterator) {\n        return new Pipeline({\n            exec: (d) => obj.loop(d),\n        });\n    }\n\n    // -- if is pipeline config item, we normalize for intake\n    if ((typeof obj) === \"function\") {\n        return Object.assign({}, DefaultPipeTx, {exec: obj});\n    }\n\n    // -- if is pipeline norm,normalized config item, we pass in for intake\n    if ((typeof obj.exec) === \"function\") {\n        return Object.assign({}, DefaultPipeTx, obj);\n    }\n\n    // -- if Pipeline, our work here is already done\n    if (obj instanceof Pipeline) {\n        return obj;\n    }\n\n    // -- if is JSON-Schema, cast as TxValidator instance\n    if (Validator.validateSchemas(obj)) {\n        obj = new Validator(obj);\n    }\n\n    // -- wraps Validators as executable\n    if ((typeof obj[\"validate\"]) === \"function\") {\n        return Object.defineProperties({}, {\n            exec: {\n                value: (d) => {\n                    obj[\"validate\"](d);\n                    if (obj.errors) {\n                        throw obj.errors;\n                    }\n\n                    return d;\n                },\n                enumerable: true,\n                configurable: false,\n            },\n            schema: {\n                get: () => obj.schema,\n                enumerable: true,\n                configurable: false,\n            },\n            errors: {\n                get: () => obj.errors,\n                enumerable: true,\n                configurable: false,\n            },\n        });\n    }\n\n    // attempts to map to Tx-able object\n    return Object.assign({}, DefaultPipeTx, obj);\n};\n\n/**\n *\n * @param cb\n * @returns {function}\n */\nexport const handleAsync = (cb) => (\n    async (d) => await new Promise(\n        (resolve) => d.then((_) => resolve(cb(_)))\n            .catch((e) => {\n                throw e;\n            })\n    ).catch((e) => { throw e; })\n);\n\n/**\n *\n * @param cb\n * @returns {Function}\n */\nexport const wrapCallback = (cb) => ((dataOrPromise) => {\n    if (dataOrPromise instanceof Promise) {\n        // delegates Promise\n        return handleAsync(dataOrPromise);\n    }\n\n    return cb(dataOrPromise)\n});\n\n/**\n *\n * @param args\n * @returns {*[]|{schema: {schema, anyOf, $id}, exec: (function(*): *)}[]}\n */\nexport const mapArgs = (...args) => {\n    if (!args.length) {\n        return [DefaultPipeTx, DefaultPipeTx];\n    }\n\n    // normalizes args list and wraps in pipeline Protocol\n    return [...args].map(castToExec);\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "DefaultPipeTx",
    "memberof": "src/Pipeline/Utils.js",
    "static": true,
    "longname": "src/Pipeline/Utils.js~DefaultPipeTx",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": null,
    "description": "provides default schema and pass through execution",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "{schema: {$schema: string, $id: string}, exec: (function(*): *)}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "fill",
    "memberof": "src/Pipeline/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Utils.js~fill",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": "{fill}",
    "description": "Fills array to enforce 2 callback minimum",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "castToExec",
    "memberof": "src/Pipeline/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Utils.js~castToExec",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": "{castToExec}",
    "description": "",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{exec: function}|Iterator|Pipeline|Validator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{exec: function}|Iterator|Pipeline|Validator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "handleAsync",
    "memberof": "src/Pipeline/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Utils.js~handleAsync",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": "{handleAsync}",
    "description": "",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "wrapCallback",
    "memberof": "src/Pipeline/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Utils.js~wrapCallback",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": "{wrapCallback}",
    "description": "",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "mapArgs",
    "memberof": "src/Pipeline/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Utils.js~mapArgs",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Utils.js",
    "importStyle": "{mapArgs}",
    "description": "",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{schema: {schema, anyOf, $id}, exec: (function(*): *)}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{schema: {schema, anyOf, $id}, exec: (function(*): *)}[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "src/Pipeline/Utils.test.js",
    "content": "import {fill, castToExec} from \"./Utils\";\nimport {Pipeline} from \"./Pipeline\";\nimport {Validator} from \"./Validator\";\nconst _schema = {\n    \"$id\": \"root#\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"type\": \"object\",\n    \"required\": [\"name\"],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        }\n    }\n};\n\ndescribe(\"TxUtils Tests\", () => {\n    describe(\"castToExec tests\", () => {\n        describe(\"function handling\", () => {\n            const _func = () => ({res: true});\n            it(\"should accept functions as pipes\", () => {\n                expect((typeof castToExec(_func).exec)).toEqual(\"function\");\n            });\n            it(\"should execute functions as pipes\", () => {\n                expect(castToExec(_func).exec().res).toBe(true);\n            });\n        });\n        describe(\"iterator handling\", () => {\n            it(\"should cast array to iterator\", () => {\n                const _res = castToExec([() => \"ok\"]);\n                expect(_res instanceof Pipeline).toBe(true);\n                expect(JSON.stringify(_res.exec([1, 2, 3]))).toEqual(\"[\\\"ok\\\",\\\"ok\\\",\\\"ok\\\"]\");\n            });\n\n            it(\"should iterate schemas\", () => {\n                const _res = castToExec([_schema]);\n                expect(_res.exec).toBeDefined()\n                expect((typeof _res.exec) === \"function\").toBeTruthy();\n                expect(_res.exec([{name: \"Testing\"}])).toEqual([{name: \"Testing\"}]);\n                expect(_res.exec([{badKey: \"Testing\"}])).toEqual([]);\n            });\n\n            it(\"should exec\", () => {\n                const _res = castToExec([() => \"ok\"]);\n                expect(JSON.stringify(new Pipeline(_res).exec([1, 2, 3]))).toEqual(\"[\\\"ok\\\",\\\"ok\\\",\\\"ok\\\"]\");\n            });\n        });\n        describe(\"schema handling\", () => {\n            it(\"should accept json-schema\", () => {\n                const _res = castToExec(_schema);\n\n                expect(_res.exec).toBeDefined()\n                expect((typeof _res.exec) === \"function\").toBeTruthy();\n                expect(_res.schema).toBeDefined();\n                expect(_res.errors).toBeDefined();\n            });\n        })\n    });\n\n    describe(\"fill tests\", () => {\n        it(\"should fill array with a given value\", () => {\n            const _ = fill([], () => ({ok: true}));\n            expect(_.length).toEqual(2);\n            expect(_[0]().ok).toBe(true);\n            expect(_[1]().ok).toBe(true);\n        });\n\n        it(\"should handle many callbacks\", () => {\n            const _ = fill([\n                () => ({ok: true}),\n                () => ({ok: true}),\n                () => ({ok: true}),\n                () => ({ok: true}),\n                () => ({ok: \"yada-yada\"}),\n            ]);\n            expect(_.length).toEqual(5);\n            expect(_[0]({ok: true}).ok).toBe(true);\n            expect(_[_.length - 1]({ok: true}).ok).toBe(\"yada-yada\");\n        });\n\n\n        it(\"should not replace existing values\", () => {\n            const _ = fill([() => ({ok: true})], (d) => d);\n            expect(_.length).toEqual(2);\n            expect(_[0]({ok: false}).ok).toBe(true);\n            expect(_[1]({ok: false}).ok).toBe(false);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Utils.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "name": "_schema",
    "memberof": "src/Pipeline/Utils.test.js",
    "static": true,
    "longname": "src/Pipeline/Utils.test.js~_schema",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Utils.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"$id\": string, \"$schema\": string, \"type\": string, \"required\": *, \"properties\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/Pipeline/Validator.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {AjvWrapper} from \"./_ajvWrapper\";\nimport {VxBehaviorSubject} from \"./vxBehaviorSubject\";\nimport {default as TxArgs} from \"../schemas/pipe-args.schema\";\nimport {default as DefaultVO} from \"../schemas/default-pipe-vo.schema\";\n\nconst _models = new WeakMap();\nconst _validators = new WeakMap();\nexport const _observers = new WeakMap();\n\nconst argsValidator = new AjvWrapper({schemas: [TxArgs]});\n\nexport class Validator {\n    /**\n     *\n     * @param schemas\n     * @returns {boolean}\n     */\n    static validateSchemas(schemas) {\n        if (schemas[\"schema\"]) {\n            if (typeof schemas.schema === \"string\") {\n                return argsValidator.exec(TxArgs.$id, schemas);\n            }\n            return false;\n        }\n        if (schemas[\"schemas\"]) {\n            return argsValidator.exec(TxArgs.$id, schemas.schemas);\n        }\n\n        return argsValidator.exec(TxArgs.$id, schemas);\n    }\n\n    /**\n     *\n     * @param schemasOrConfig\n     * @returns {Object|null}\n     */\n    static deriveSchema(schemasOrConfig) {\n        if ((typeof schemasOrConfig) === \"object\" && !schemasOrConfig.schemas) {\n            return schemasOrConfig;\n        }\n\n        if (schemasOrConfig.use) {\n            const _useSchema = schemasOrConfig.schemas.find((_) => _.$id === schemasOrConfig.use);\n            if (_useSchema) {\n                return _useSchema.schema;\n            } else {\n                return null;\n            }\n        }\n\n        return schemasOrConfig.schemas.length ? schemasOrConfig.schemas[schemasOrConfig.schemas.length - 1] : null;\n    }\n\n    /**\n     * Accepts one `json-schema` or `tx-config` per instance and an (optional) Ajv config\n     * @param schemaOrConfig\n     * @param options (optional)\n     */\n    constructor(schemaOrConfig, options) {\n        if (!schemaOrConfig) {\n            throw \"Schema or Schema Config required\";\n        }\n        if (!Validator.validateSchemas(schemaOrConfig)) {\n            throw `Unable to process schema: ${JSON.stringify(argsValidator.$ajv.errors)}`;\n        }\n\n        if (!schemaOrConfig[\"schemas\"]) {\n            schemaOrConfig = {\n                schemas: Array.isArray(schemaOrConfig) ? schemaOrConfig : [schemaOrConfig],\n            };\n        }\n\n        Object.defineProperty(this, \"schema\", {\n            value: Validator.deriveSchema(schemaOrConfig) || {schemas: [DefaultVO]},\n            enumerable: true,\n        });\n\n        const _baseSchema = schemaOrConfig.schemas[schemaOrConfig.schemas.length - 1] || DefaultVO;\n\n        // this is just a quick guess at our default data type (object|array)\n        _models.set(this, _baseSchema.hasOwnProperty(\"items\") ? [] : {});\n\n        _observers.set(this, new VxBehaviorSubject());\n\n        _validators.set(this, new AjvWrapper(schemaOrConfig, options || {}));\n    }\n\n    /**\n     * Applies Object.freeze to model and triggers complete notification for pipeline\n     * @returns {Validator}\n     */\n    freeze() {\n        _models.set(this, Object.freeze(_models.get(this)));\n        _observers.get(this).complete();\n        return this;\n    }\n\n    /**\n     * Getter for Object.isFrozen status of this node and it's ancestors\n     * @returns {boolean}\n     */\n    get isFrozen() {\n        if ((typeof _models.get(this)) !== \"object\") {\n            return false;\n        }\n        return Object.isFrozen(_models.get(this));\n    }\n\n    /**\n     * Getter for validation errors incurred from model setter\n     * @returns {*}\n     */\n    get errors() {\n        return _validators.get(this).$ajv.errors;\n    }\n\n    /**\n     * Registers notification handler to observable\n     * @param handler\n     * @returns {*}\n     */\n    subscribe(handler) {\n        return _observers.get(this).subscribe(handler);\n    }\n\n    /**\n     * Performs schema validation of value\n     * @param value\n     */\n    validate(value) {\n        const $id = AjvWrapper.getSchemaID(this.schema[0] || this.schema);\n        const __ = _validators.get(this).exec($id, value);\n        if (this.errors) {\n            _observers.get(this).error({\n                error: this.errors,\n                data: value,\n            });\n        }\n        return __;\n    }\n\n    /**\n     * Setter for validator data value\n     * @param data\n     */\n    set model(data) {\n        if (this.isFrozen) {\n            return;\n        }\n\n        const _t = this.validate(data);\n        if (_t === true) {\n            _models.set(this, data);\n            _observers.get(this).next(data);\n        } else {\n            if (_t === false) {\n                _observers.get(this).error({\n                    error: this.errors,\n                    data: data,\n                });\n            } else {\n                _observers.get(this).error({\n                    error: _t,\n                    data: data,\n                });\n            }\n        }\n    }\n\n    /**\n     * Getter for validator data value\n     * @returns {{}|[]}\n     */\n    get model() {\n        const _d = _models.get(this);\n        return Array.isArray(_d) ? [..._d] : Object.assign({}, _d);\n    }\n\n    /**\n     * Provides model value as JSON\n     * @returns {{}|*[]}\n     */\n    toJSON() {\n        return this.model;\n    }\n\n    /**\n     * Overrides toString. Provides model value as String\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.model);\n    }\n\n    /**\n     * Overrides valueOf. Provides model value as JSON\n     * @returns {{}|*[]}\n     */\n    valueOf() {\n        return this.model;\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Validator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "_models",
    "memberof": "src/Pipeline/Validator.js",
    "static": true,
    "longname": "src/Pipeline/Validator.js~_models",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "_validators",
    "memberof": "src/Pipeline/Validator.js",
    "static": true,
    "longname": "src/Pipeline/Validator.js~_validators",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "_observers",
    "memberof": "src/Pipeline/Validator.js",
    "static": true,
    "longname": "src/Pipeline/Validator.js~_observers",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Validator.js",
    "importStyle": "{_observers}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "argsValidator",
    "memberof": "src/Pipeline/Validator.js",
    "static": true,
    "longname": "src/Pipeline/Validator.js~argsValidator",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/Validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "Validator",
    "memberof": "src/Pipeline/Validator.js",
    "static": true,
    "longname": "src/Pipeline/Validator.js~Validator",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/Validator.js",
    "importStyle": "{Validator}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "validateSchemas",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Validator.js~Validator.validateSchemas",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "deriveSchema",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/Validator.js~Validator.deriveSchema",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemasOrConfig",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 289,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#constructor",
    "access": "public",
    "description": "Accepts one `json-schema` or `tx-config` per instance and an (optional) Ajv config",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemaOrConfig",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "(optional)"
      }
    ]
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "freeze",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#freeze",
    "access": "public",
    "description": "Applies Object.freeze to model and triggers complete notification for pipeline",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Validator}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validator"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "get",
    "name": "isFrozen",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#isFrozen",
    "access": "public",
    "description": "Getter for Object.isFrozen status of this node and it's ancestors",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "get",
    "name": "errors",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#errors",
    "access": "public",
    "description": "Getter for validation errors incurred from model setter",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#subscribe",
    "access": "public",
    "description": "Registers notification handler to observable",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "validate",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#validate",
    "access": "public",
    "description": "Performs schema validation of value",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "set",
    "name": "model",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#model",
    "access": "public",
    "description": "Setter for validator data value",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 296,
    "kind": "get",
    "name": "model",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#model",
    "access": "public",
    "description": "Getter for validator data value",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}|[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}|[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#toJSON",
    "access": "public",
    "description": "Provides model value as JSON",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}|*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}|*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#toString",
    "access": "public",
    "description": "Overrides toString. Provides model value as String",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/Pipeline/Validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/Validator.js~Validator#valueOf",
    "access": "public",
    "description": "Overrides valueOf. Provides model value as JSON",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}|*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}|*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "src/Pipeline/Validator.test.js",
    "content": "import {Validator} from \"./Validator\";\nimport {basicModel, nameRequiredSchema} from \"../../fixtures/PropertiesModel.schemas\";\nimport {default as DefaultVO} from \"../schemas/default-pipe-vo.schema\";\n\ndescribe(\"TxValidator Test Suite\", () => {\n   describe(\"Schema Handling\", () => {\n      it(\"should accept stand-alone schema\", () => {\n         const _txV = new Validator(DefaultVO);\n         expect(_txV.errors).toEqual(null);\n      });\n      it(\"should accept schema config\", () => {\n          const _txV = new Validator( {\n              schemas: [DefaultVO]\n          });\n          expect(_txV.errors).toEqual(null);\n      });\n   });\n\n   describe(\"TxValidator.validateSchemas\", () => {\n      it(\"should pass valid schema\", () => {\n         expect(Validator.validateSchemas(nameRequiredSchema)).toEqual(true);\n      })\n   });\n\n   describe(\"basic validation\", () => {\n      let _txV;\n      beforeEach(() => {\n         _txV = new Validator( {\n            meta: [],\n            schemas: [basicModel]\n         });\n      });\n      it(\"should validate data\", () => {\n         const model = {\n            name: \"test\",\n            active: true,\n            age: 99,\n         };\n         expect(_txV.errors === null).toBe(true);\n\n         // set age to invalid data type\n         _txV.model = Object.assign({}, model, {age: \"99\"});\n         expect(_txV.errors === null).toBe(false);\n      });\n   });\n\n   // TODO: find other use-case for meta besides disco'd Schema Draft 04\n   describe.skip(\"validation with meta\", () => {\n      let _txV;\n      beforeEach(() => {\n         _txV = new Validator( {\n            meta: [JSONSchemaDraft04],\n            schemas: [Object.assign(basicModel, {\n               $schema: \"http://json-schema.org/draft-04/schema#\",\n            })],\n         });\n      });\n      it(\"should validate data with meta\", () => {\n         _txV.model = {\n            name: \"test\",\n            active: true,\n            age: 99,\n         };\n         expect(_txV.errors === null).toBe(true);\n         _txV.model = {\n            name: \"test\",\n            active: \"true\",\n            foo: \"bar\",\n            age: \"99\",\n         };\n         expect(_txV.errors === null).toBe(false);\n      });\n   });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/Validator.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "src/Pipeline/_ajvWrapper.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\n/**\n * @private\n */\n\nimport Ajv from \"ajv\";\nimport {default as ajvOptions} from \"../ajv-options\";\n\nconst _validators = new WeakMap();\nconst _ajvRef = new WeakMap();\nconst _idRef = new WeakMap();\n/**\n *\n * @param $ajv\n * @param schema\n * @param schemaId\n */\nconst addSchema = ($ajv, schema, schemaId) => {\n    if (!schemaId) {\n        schemaId = AjvWrapper.getSchemaID(schema);\n    }\n\n    // try {\n    if (_idRef.get($ajv).indexOf(schemaId) === -1) {\n        _idRef.get($ajv).splice(_idRef.get($ajv).length, 0, schemaId);\n\n        $ajv.addSchema(schema, schemaId);\n        return true\n    }\n    // } catch (e) {\n    //    return\n    // }\n};\n\nconst addMetaSchema = ($ajv, schema) => {\n    $ajv.addMetaSchema(schema);\n};\n\n/**\n * Wrapper for Ajv JSON-PropertiesModel Validator\n * @private\n */\nexport class AjvWrapper {\n    /**\n     * @constructor\n     * @param schemas\n     * @param ajvOptions\n     */\n    constructor(schemas, ajvOptions = {}) {\n        if (_validators.get(this) === void (0)) {\n            _validators.set(this, {});\n        }\n\n        // applies user specified options over our default Ajv Options\n        const opts = Object.assign(_ajvOptions, ajvOptions);\n\n        // makes user defined options object accessible for evaluation\n        Object.defineProperty(this, \"options\", {\n            get: () => opts,\n            enumerable: true,\n        });\n\n        // declares default path of root# for validation queries\n        this.path = \"root#\";\n\n        // appends trailing \"#\" to end of \"id\" string if missing\n        const _procID = (id) => id.match(/#+$/) === null ? `${id}#` : id;\n\n        // processes schema \"id\" for JSON-schemas =< v04 and >= v06\n        const _procSchema = (_s) => {\n            const _key = [\"$id\", \"id\"].find((k) => _s.hasOwnProperty(`${k}`));\n            if (_key) {\n                _s[\"$id\"] = _procID(_s[_key]);\n            }\n            return _s;\n        };\n\n        // evaluates contents of schemas to normalize \"id\" attributes to have trailing \"#\"\n        if ((typeof schemas) === \"object\") {\n            if (schemas.hasOwnProperty(\"schemas\")) {\n                if (Array.isArray(schemas.schemas)) {\n                    schemas.schemas = schemas.schemas.map(_procSchema);\n                } else {\n                    schemas.schemas = _procSchema(schemas.schemas);\n\n                }\n            } else {\n                if (Array.isArray(schemas)) {\n                    schemas = schemas.map(_procSchema);\n                } else {\n                    schemas = _procSchema(schemas);\n                }\n            }\n        }\n\n        // initializes Ajv instance for this Doc and stores it to WeakMap\n        _ajvRef.set(this, createAJV(schemas, opts));\n\n        // accept no further modifications to this object\n        Object.seal(this);\n    }\n\n    /**\n     * Getter for captive Ajv validator\n     * -- use this for Ajv API Methods\n     * @returns {ajv}\n     */\n    get $ajv() {\n        return _ajvRef.get(this);\n    }\n\n    /**\n     * Executes validator at PropertiesModel $model `path` against `value`\n     * @param {string} path\n     * @param {any} value\n     */\n    exec(path, value) {\n        // appends id ref to path\n        if (path.indexOf(\"#\") < 0) {\n            path = `${this.path}${path}`;\n        }\n\n        let _res = false;\n\n        try {\n            _res = this.$ajv.validate(path, value);\n            if (this.$ajv.errors) {\n                return false; //JSON.stringify(this.$ajv.errors);\n            }\n        } catch (e) {\n            return e.toString();\n        }\n\n\n        return _res;\n    }\n\n    /**\n     *\n     * @param schema\n     * @param schemaId\n     */\n    addSchema(schema, schemaId = false) {\n        addSchema(this, schema, schemaId);\n        return this;\n    }\n\n    /**\n     * retrieves ID attribute from schema\n     * @param schema\n     * @returns {string}\n     */\n    static getSchemaID(schema) {\n        const id = [\"$id\", \"id\"].filter((id) => schema.hasOwnProperty(id));\n        return id.length ? schema[id[0]] : \"root#\";\n    }\n}\n\n/**\n *\n * @param $ajv\n * @param _s\n * @private\n */\nconst _metaTest = ($ajv, _s) => {\n    if (_s.hasOwnProperty(\"meta\")) {\n        if (Array.isArray(_s.meta)) {\n            _s.meta.forEach((meta) => {\n                addMetaSchema($ajv, meta);\n            });\n        }\n    }\n};\n\n/**\n *\n * @param schemas\n * @param opts\n * @returns {ajv | ajv.Ajv}\n */\nconst createAJV = (schemas, opts) => {\n    const _ajv = new Ajv(opts);\n    _idRef.set(_ajv, []);\n    if (schemas) {\n        _metaTest(_ajv, schemas);\n        // todo: review performance of addSchema\n        schemas = schemas[\"schemas\"] ? schemas.schemas : schemas;\n        if (Array.isArray(schemas)) {\n            schemas.forEach((schema) => {\n                // _metaTest(_ajv, schema);\n                addSchema(_ajv, schema);\n            });\n        } else {\n            if ((typeof schemas).match(/^(object|boolean)$/)) {\n                _metaTest(_ajv, schemas);\n                addSchema(_ajv, schemas);\n            }\n        }\n    }\n\n    return _ajv;\n};\n\n/**\n * AJV Options Config in it's entirely for reference\n * only Pipeline specific option changes are enabled\n * @type {*}\n * @private\n */\nconst _ajvOptions = Object.assign({}, ajvOptions, {\n    allowUnionTypes: true,\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/_ajvWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "_validators",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~_validators",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "_ajvRef",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~_ajvRef",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "_idRef",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~_idRef",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "function",
    "name": "addSchema",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~addSchema",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "$ajv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemaId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 306,
    "kind": "function",
    "name": "addMetaSchema",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~addMetaSchema",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "$ajv",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 307,
    "kind": "class",
    "name": "AjvWrapper",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": "{AjvWrapper}",
    "description": "Wrapper for Ajv JSON-PropertiesModel Validator",
    "lineNumber": 67,
    "interface": false
  },
  {
    "__docId__": 308,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ajvOptions",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "path",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "static": false,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper#path",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "$ajv",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper#$ajv",
    "access": "public",
    "description": "Getter for captive Ajv validator\n-- use this for Ajv API Methods",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ajv}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ajv"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "exec",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper#exec",
    "access": "public",
    "description": "Executes validator at PropertiesModel $model `path` against `value`",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "addSchema",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper#addSchema",
    "access": "public",
    "description": "",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemaId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "getSchemaID",
    "memberof": "src/Pipeline/_ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~AjvWrapper.getSchemaID",
    "access": "public",
    "description": "retrieves ID attribute from schema",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "_metaTest",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~_metaTest",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "$ajv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "_s",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "createAJV",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~createAJV",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ajv | ajv.Ajv}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ajv ",
        " ajv.Ajv"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "name": "_ajvOptions",
    "memberof": "src/Pipeline/_ajvWrapper.js",
    "static": true,
    "longname": "src/Pipeline/_ajvWrapper.js~_ajvOptions",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/_ajvWrapper.js",
    "importStyle": null,
    "description": "AJV Options Config in it's entirely for reference\nonly Pipeline specific option changes are enabled",
    "lineNumber": 234,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "src/Pipeline/_ajvWrapper.test.js",
    "content": "import {AjvWrapper} from \"./_ajvWrapper\";\nimport {default as TxArgsSchema} from \"../schemas/pipe-args.schema\";\nimport {basicModel} from \"../../fixtures/PropertiesModel.schemas\";\n\ndescribe(\"AJVWrapper Tests\", () => {\n    let _ajv = null;\n    const _data = {\n        name: \"Test\",\n        active: \"true\",\n        age: 99\n    };\n\n    describe.only(\"AJV Schema Validation\", () => {\n\n        it(\"should accept valid schemas\", () => {\n            let _ajv;\n            expect(() => _ajv = new AjvWrapper({\n                schemas: [basicModel],\n            })).not.toThrow();\n\n            const _res = _ajv.exec(basicModel.$id, Object.assign(_data, {active: true}));\n            // should have no validator errors\n            expect(_ajv.$ajv.errors).toEqual(null);\n            // validator should return true\n            expect(_res).toBe(true);\n        });\n\n    });\n\n    describe(\"Meta-Schemas\", () => {\n        const _04Schema = Object.assign({}, basicModel, {\n            $schema: \"http://json-schema.org/draft-04/schema#\"\n        });\n\n        it(\"should reject < draft-07 schema refs\", () => {\n            // should fail with errors\n            expect(() => new AjvWrapper({schemas: [_04Schema],})).toThrow();\n        });\n\n        // todo: find replacement for JSON schema 04 for metaschema\n        it.skip(\"should reject with meta-schema\", () => {\n            // should fail with errors\n            expect(() => new AjvWrapper({\n                meta: [JSONSchemaV4],\n                schemas: [_04Schema]\n            })).toThrow();\n        });\n    });\n\n    describe(\"Schema as Data Validation\", () => {\n        beforeEach(() => {\n            _ajv = new AjvWrapper({\n                schemas: [TxArgsSchema],\n            });\n        });\n\n        it(\"should reject invalid data\", () => {\n            const _res = _ajv.exec(TxArgsSchema.$id, {\n                schema: {},\n                exec: () => {\n                },\n            });\n\n            // should have errors\n            expect(_ajv.$ajv.errors === null).toBe(false);\n            // validator result should be false\n            expect(_res).toBe(false);\n\n        });\n    });\n});\n\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/_ajvWrapper.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "src/Pipeline/index.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nexport {Pipeline as Pipeline} from './Pipeline';\nexport {Validator as TxValidator} from './Validator';\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "file",
    "name": "src/Pipeline/vxBehaviorSubject.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2019 Van Schroeder\nCopyright (c) 2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\nimport {BehaviorSubject, skip} from \"rxjs\";\n\nconst _observers = new WeakMap();\n\nexport class VxBehaviorSubject {\n    /**\n     * @constructor\n     */\n    constructor() {\n        const __ = {};\n        [\"onNext\", \"onError\", \"onComplete\"].forEach((_k) => {\n            const _subj = new BehaviorSubject(null);\n            Object.defineProperty(__, _k, {\n                value: _subj.pipe(skip(1)),\n                enumerable: true,\n                configurable: false,\n                writable: false,\n            });\n        });\n\n        _observers.set(this, __);\n    }\n\n    /**\n     * Creates BehaviorSubjects\n     * @returns {VxBehaviorSubject}\n     */\n    static create() {\n        return new VxBehaviorSubject();\n    }\n\n    /**\n     * Calls next on Next Subject\n     */\n    next(value) {\n        const _o = _observers.get(this);\n        if (_o !== null) {\n            _o.onNext.next(value);\n        }\n    }\n\n    /**\n     * Calls next on Error Subject\n     * @param error\n     */\n    error(error) {\n        const _o = _observers.get(this);\n        if (_o !== null) {\n            _o.onError.next(error);\n        }\n    }\n\n    /**\n     * Calls next on Complete Subject\n     */\n    complete() {\n        const _o = _observers.get(this);\n        if (_o !== null) {\n            _o.onComplete.next();\n            // calls complete on all Subjects\n            Object.keys(_o).forEach(_ => _o[_].complete());\n        }\n    }\n\n    /**\n     * Subscribes handler method to property observer\n     * @param handler\n     * @returns {object|boolean}\n     */\n    subscribe(handler) {\n        const _o = _observers.get(this);\n        // references to subscriptions for Observable\n        const _subRefs = [];\n\n        // creates an extensible object to hold our unsubscribe method\n        // and adds unsubscribe calls to the Proto object\n        const _subs = class { };\n\n        if ((typeof handler) === \"function\") {\n            // if is raw function, we pass straight in as `next`\n            _subRefs.push(_o.onNext.subscribe(handler));\n        } else {\n            // inits observer handlers if defined on passed `func` object\n            [\n                {call: \"onNext\", func: \"next\"},\n                {call: \"onError\", func: \"error\"},\n                {call: \"onComplete\", func: \"complete\"},\n            ].forEach((obs) => {\n                // use of braces is due to unreliability of `hasOwnProperty`\n                if (handler[obs.func]) {\n                    // if the notification type handler is present, subscribe to it\n                    _subRefs.push(_o[obs.call].subscribe(handler[obs.func]));\n                }\n            });\n        }\n\n        // adds unsubscribe to the Proto object\n        _subs.prototype.unsubscribe = () => {\n            _subRefs.forEach((sub) => sub.unsubscribe());\n        };\n\n        return new _subs();\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/vxBehaviorSubject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "_observers",
    "memberof": "src/Pipeline/vxBehaviorSubject.js",
    "static": true,
    "longname": "src/Pipeline/vxBehaviorSubject.js~_observers",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/Pipeline/vxBehaviorSubject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "class",
    "name": "VxBehaviorSubject",
    "memberof": "src/Pipeline/vxBehaviorSubject.js",
    "static": true,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "access": "public",
    "export": true,
    "importPath": "datamatic/src/Pipeline/vxBehaviorSubject.js",
    "importStyle": "{VxBehaviorSubject}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 322,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "create",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject.create",
    "access": "public",
    "description": "Creates BehaviorSubjects",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VxBehaviorSubject}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VxBehaviorSubject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "next",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject#next",
    "access": "public",
    "description": "Calls next on Next Subject",
    "lineNumber": 60,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "error",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject#error",
    "access": "public",
    "description": "Calls next on Error Subject",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "complete",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject#complete",
    "access": "public",
    "description": "Calls next on Complete Subject",
    "lineNumber": 81,
    "params": [],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Pipeline/vxBehaviorSubject.js~VxBehaviorSubject#subscribe",
    "access": "public",
    "description": "Subscribes handler method to property observer",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object|boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 328,
    "kind": "file",
    "name": "src/Pipeline/vxBehaviorSubject.test.js",
    "content": "import {VxBehaviorSubject} from \"./vxBehaviorSubject\";\n\ndescribe(\"vxBehaviorSubject\", () => {\n    let _t;\n    beforeEach(() => {\n        _t = VxBehaviorSubject.create();\n    });\n\n    it(\"should handle next\", (done) => {\n        let _cnt = 0;\n\n        _t.subscribe({\n            next: (d) => {\n                expect(d).toEqual(\"ok\");\n                if ((++_cnt) === 2) {\n                    done();\n                }\n            }\n        });\n\n        _t.next(\"ok\");\n        _t.next(\"ok\");\n    });\n\n    it(\"should handle error\", (done) => {\n        const _d = \"error message\";\n        let _cnt = 0;\n\n        _t.subscribe({\n            error: (d) => {\n                expect(d).toEqual(_d);\n                if ((++_cnt) === 2) {\n                    done();\n                }\n            }\n        });\n\n        _t.error(_d);\n        _t.error(_d);\n    });\n\n    it(\"should handle complete\", (done) => {\n        _t.subscribe({\n            complete: () => {\n                done();\n            },\n\n        });\n        _t.complete();\n    })\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/Pipeline/vxBehaviorSubject.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/ajv-options.js",
    "content": "/**\n * AJV Options Config in it's entirely for reference\n * only Model specific option changes are enabled\n *\n * taken verbatim from: https://ajv.js.org/options.html\n * @type {*}\n *\n */\nexport default {\n    // strict mode options (NEW)\n    strict: undefined,\n    strictSchema: true,\n    strictNumbers: true,\n    strictTypes: \"log\",\n    strictTuples: \"log\",\n    strictRequired: false,\n    allowUnionTypes: false,\n    allowMatchingProperties: false,\n    validateFormats: true,\n    // validation and reporting options:\n    $data: false,\n    allErrors: false,\n    verbose: false,\n    discriminator: false,\n    unicodeRegExp: true,\n    timestamp: undefined,\n    parseDate: false,\n    allowDate: false,\n    int32range: true,\n    $comment: false,\n    formats: {},\n    keywords: [],\n    schemas: {},\n    logger: undefined,\n    loadSchema: undefined, // function(uri: string): Promise {}\n    // options to modify validated data:\n    removeAdditional: false,\n    useDefaults: false,\n    coerceTypes: false,\n    // advanced options:\n    meta: true,\n    validateSchema: true,\n    addUsedSchema: true,\n    inlineRefs: true,\n    passContext: false,\n    loopRequired: 200,\n    loopEnum: 200, // NEW\n    ownProperties: false,\n    multipleOfPrecision: undefined,\n    messages: true, // false with JTD\n    code: {\n        // NEW\n        es5: false,\n        lines: false,\n        source: false,\n        process: undefined, // (code: string) => string\n        optimize: true,\n    },\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/ajv-options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "src/ajvWrapper.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\n/**\n * @private\n */\nimport Ajv from \"ajv\";\nimport {default as ajvOptions} from \"./ajv-options\";\nimport {Model} from \"./Model\";\nimport addFormats from \"ajv-formats\";\n\nconst _validators = new WeakMap();\n\n/**\n * backreferences object tree for top-down evaluation\n * @param path\n * @param data\n * @param owner\n * @returns {any}\n * @private\n */\nconst _preconstruct = (path, data, owner) => {\n    const _p = path.replace(/^[a-z0-9_]*#+/i, \"\").split(\"/\");\n    let _o = Object.assign({}, data);\n    while (_p.length > 0) {\n        _p.pop();\n        try {\n            _o = Object.assign({}, owner.getPath(_p.join(\".\")), _o);\n        } catch (e) {\n            _p.splice(0, _p.length - 1);\n            throw e;\n        }\n    }\n\n    return _o;\n};\n\nlet $ajv;\n\n/**\n *\n * @param opts\n */\nconst ajvInit = (opts) => {\n    if ($ajv) {\n        return $ajv;\n    }\n\n    addFormats($ajv = new Ajv(opts));\n}\n\n\nclass SchemaUtils {\n    /**\n     * Processes schema \"id\" for JSON-Schema versions =< v04 and >= v06\n     *\n     * @param schema\n     * @return {boolean|string|*}\n     */\n    static getSchemaID(schema) {\n        const _id = schema[\"$id\"] || schema[\"id\"];\n\n        if (!_id) {\n            return false;\n        }\n\n        // ensures trailing \"#\" to end of \"id\" string\n        return _id.match(/#+$/) === null ? `${_id}#` : _id;\n    }\n\n    /**\n     * • Evaluates contents of schemas to normalize \"id\" attributes\n     * • Ensures schemas value is array\n     *\n     * @param schemas\n     * @return {*}\n     */\n    static normalizeSchemas(schemas) {\n        if ((schemas.hasOwnProperty(\"schemas\"))) {\n            schemas = schemas.schemas;\n        }\n\n        const assignSchemaId = (__) => {\n            return Object.assign(__, {id: SchemaUtils.getSchemaID});\n        };\n\n        return Array.isArray(schemas) ?\n            schemas.map(assignSchemaId) : [\n                assignSchemaId(\n                    (typeof schemas) === \"string\" ?\n                        JSON.parse(schemas) : schemas\n                )\n            ];\n    }\n\n    /**\n     *\n     * @param schemas\n     * @return {*}\n     */\n    static addSchemas(schemas = {}) {\n        if (schemas.hasOwnProperty(\"meta\")) {\n            schemas.meta.forEach($ajv.addMetaSchema);\n        }\n\n        schemas.schemas.forEach((schema) => {\n            $ajv.addSchema(schema, schema.id);\n        });\n    }\n}\n\n/**\n * Wrapper for Ajv JSON-PropertiesModel Validator\n * @private\n */\nexport class AjvWrapper {\n    /**\n     * @constructor\n     * @param owner\n     * @param schemas\n     * @param ajvOptions\n     */\n    constructor(owner, schemas, options = {}) {\n        // ensures that we are given something that represents a Model object\n        if ((!owner) || !(owner instanceof Model)) {\n            throw \"Model is required at arguments[0]\";\n        }\n\n        if (_validators.get(this) === void (0)) {\n            _validators.set(this, {});\n        }\n\n        // defines getter for parent Model reference\n        Object.defineProperty(this, \"$owner\", {\n            get: () => owner,\n            enumerable: false,\n        });\n\n        // applies user specified ajv options and makes accessible for evaluation\n        Object.defineProperty(this, \"options\", {\n            value: Object.assign(ajvOptions, options),\n            enumerable: true,\n            configurable: false,\n            writable: false,\n        });\n\n        ajvInit(this.options);\n\n        // declares default path of root# for validation queries\n        this.path = \"root#\";\n\n        const _schemas = SchemaUtils.normalizeSchemas(schemas);\n\n        // const _ajv = createAjv(this, schemas, opts);\n        if (!_vDict.hasOwnProperty(path)) {\n            _vDict[path] = this.$ajv.getSchema(path);\n            console.log(`_vDict[\"${path}\"]: ${JSON.stringify(this.$ajv.getSchema(path), null, 2)}`);\n        }\n\n        // accept no further modifications to this object\n        Object.seal(this);\n    }\n\n    /**\n     * Helper method to derive path for given model\n     * todo: review for removal\n     * @param model\n     * @return {string}\n     */\n    static resolvePath(model) {\n        return \"not yet implemented\";\n    }\n\n    // /**\n    //  * Getter for captive Ajv validator\n    //  * -- use this for Ajv API Methods\n    //  * @returns {ajv}\n    //  */\n    // get $ajv() {\n    //     return _ajvRef.get(this);\n    // }\n\n    get errors() {\n        return $ajv.errors;\n    }\n\n    /**\n     * Executes validator at PropertiesModel $model `path` against `value`\n     * @param {string} path\n     * @param {any} value\n     */\n    exec(path, value) {\n        // appends id ref to path\n        if (path.indexOf(\"#\") < 0) {\n            path = `${this.path}${path}`;\n        }\n\n        const _vDict = _validators.get(this);\n        let _res = false;\n\n        /*\n            makes initial validation attempt and re-attempts from top on failure\n         */\n        try {\n            _res = _vDict[path](value);\n        } catch (e) {\n\n            if (path.replace(/(items|properties)\\/?/, \"\").split(\"/\").length) {\n                return this.exec(`${this.path}/`, _preconstruct(path, value, this.$owner));\n            }\n\n            throw(e);\n        }\n\n        return _res;\n    }\n}\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/ajvWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "_validators",
    "memberof": "src/ajvWrapper.js",
    "static": true,
    "longname": "src/ajvWrapper.js~_validators",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "_preconstruct",
    "memberof": "src/ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~_preconstruct",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/ajvWrapper.js",
    "importStyle": null,
    "description": "backreferences object tree for top-down evaluation",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "function",
    "name": "ajvInit",
    "memberof": "src/ajvWrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~ajvInit",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/ajvWrapper.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "SchemaUtils",
    "memberof": "src/ajvWrapper.js",
    "static": true,
    "longname": "src/ajvWrapper.js~SchemaUtils",
    "access": "public",
    "export": false,
    "importPath": "datamatic/src/ajvWrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "getSchemaID",
    "memberof": "src/ajvWrapper.js~SchemaUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~SchemaUtils.getSchemaID",
    "access": "public",
    "description": "Processes schema \"id\" for JSON-Schema versions =< v04 and >= v06",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string",
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "normalizeSchemas",
    "memberof": "src/ajvWrapper.js~SchemaUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~SchemaUtils.normalizeSchemas",
    "access": "public",
    "description": "• Evaluates contents of schemas to normalize \"id\" attributes\n• Ensures schemas value is array",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "addSchemas",
    "memberof": "src/ajvWrapper.js~SchemaUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~SchemaUtils.addSchemas",
    "access": "public",
    "description": "",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "class",
    "name": "AjvWrapper",
    "memberof": "src/ajvWrapper.js",
    "static": true,
    "longname": "src/ajvWrapper.js~AjvWrapper",
    "access": "private",
    "export": true,
    "importPath": "datamatic/src/ajvWrapper.js",
    "importStyle": "{AjvWrapper}",
    "description": "Wrapper for Ajv JSON-PropertiesModel Validator",
    "lineNumber": 138,
    "interface": false
  },
  {
    "__docId__": 339,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ajvWrapper.js~AjvWrapper#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schemas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ajvOptions",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "path",
    "memberof": "src/ajvWrapper.js~AjvWrapper",
    "static": false,
    "longname": "src/ajvWrapper.js~AjvWrapper#path",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "resolvePath",
    "memberof": "src/ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ajvWrapper.js~AjvWrapper.resolvePath",
    "access": "public",
    "description": "Helper method to derive path for given model\ntodo: review for removal",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "get",
    "name": "errors",
    "memberof": "src/ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ajvWrapper.js~AjvWrapper#errors",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "exec",
    "memberof": "src/ajvWrapper.js~AjvWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ajvWrapper.js~AjvWrapper#exec",
    "access": "public",
    "description": "Executes validator at PropertiesModel $model `path` against `value`",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "src/complex-schema.test.js",
    "content": "import {default as Schema} from \"../fixtures/basic-refs.schema\";\nimport {default as Data} from \"../fixtures/basic-refs.data\";\nimport {default as Swagger} from \"../fixtures/OpenAPIv2\";\nimport {default as OpenAPIv3} from \"../fixtures/OpenAPIv3\";\nimport {default as JSONSchema4} from \"../fixtures/json-schema-draft04.schema\";\nimport {default as basicAPI} from \"../fixtures/petstore.v2\"\nimport {Model} from \"./Model\";\n\ndescribe(\"Basic Refs\", () => {\n    describe(\"ref handling\", () => {\n        it(\"should validate schema containing $refs and definitions\", (done) => {\n            const _owner = new Model({schemas: [Schema]});\n            _owner.subscribe({\n                next: (model) => {\n                    expect(_owner.errors).toBe(null);\n                    expect(model.toJSON()).toEqual(Data);\n                    done();\n                },\n                error: (e) => {\n                    done(`${e}`);\n                }\n            });\n            _owner.model = Data;\n        });\n    });\n\n    describe(\"OPenAPI Tests\", () => {\n        it(\"should load and validate Swagger Schema\", () => {\n            const _owner = new Model({\n                meta: [JSONSchema4],\n                schemas: [Swagger],\n                use: \"http://swagger.io/v2/schema.json#\",\n            });\n            _owner.model = basicAPI;\n            // test to ensure no errors were logged\n            expect(_owner.errors).toBe(null);\n            // test for completeness\n            expect(_owner.toJSON()).toEqual(basicAPI);\n        });\n\n        it(\"should load and validate OpenAPIv3 Schema\", () => {\n            const _d = {\n                openapi: \"3.0.1\",\n                info: {\n                    title: \"testing\",\n                    version: \"1.0.0\",\n                },\n                paths: {},\n            };\n            const _owner = new Model({\n                meta: [JSONSchema4],\n                schemas: [OpenAPIv3],\n                use: \"http://openapis.org/v3/schema.json#\",\n            });\n            _owner.model = _d;\n            // test to ensure no errors were logged\n            expect(_owner.errors).toBe(null);\n            // test for completeness\n            expect(_owner.toJSON()).toEqual(_d);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/complex-schema.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "file",
    "name": "src/dist.test.js",
    "content": "import {basicModel} from \"../fixtures/PropertiesModel.schemas\";\nconst _d = {\n    name: \"Ed Testy\",\n    age: 99,\n    active: true,\n};\n\ndescribe(\"node commonjs require\", () => {\n    const {Model} = require(\"../index\");\n    let _model;\n\n    beforeEach(() => {\n        _model = new Model({\n            schemas: [basicModel],\n        });\n    });\n\n    it(\"should import Model and create document\", ()=> {\n        _model.model = {\n            foo: \"bar\"\n        };\n        expect(_model.model.foo).toBe(\"bar\");\n    });\n\n    it(\"should be an observable\", (done) => {\n        let _ival = 0;\n        const _arr = new Array(0, 2000);\n        const _iterator = {\n            next: (\n                () => _ival++ < _arr.length ? {\n                    value: _model.model = _d,\n                    done: false,\n                } : {\n                    value: _model.freeze(),\n                    done: true,\n                }\n            ),\n        };\n        _model.subscribe({next: _iterator.next, complete: done});\n        _iterator.next();\n    });\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/dist.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "variable",
    "name": "_d",
    "memberof": "src/dist.test.js",
    "static": true,
    "longname": "src/dist.test.js~_d",
    "access": "private",
    "export": false,
    "importPath": "datamatic/src/dist.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"age\": number, \"active\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/index.js",
    "content": "/* ############################################################################\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2019 Van Schroeder\nCopyright (c) 2017-2019 Webfreshener, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n############################################################################ */\n//== Polyfills Object.assign\nif (typeof Object.assign !== \"function\") {\n    Object.assign = require('object.assign/polyfill')();\n}\nexport {Model as Model} from \"./Model\";\nexport {Pipeline as Pipeline} from \"./Pipeline\";\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "src/index.test.js",
    "content": "import {Model} from './index';\nimport {Model as DistModel} from '../index'\n\ndescribe(\"Index Tests\", () => {\n    describe(\"Package Validation Tests\", () => {\n        it(\"should import from ES6 Source\", function () {\n            expect(typeof Model).toEqual('function');\n        });\n\n        it(\"should import from WebPacked Lib\", function () {\n            expect(typeof DistModel).toEqual('function');\n        });\n\n        it(\"should import from ES5 `require`\", () => {\n            expect(typeof (require('../index').Model)).toEqual('function');\n        });\n    });\n\n    describe(\"Polyfill\", () => {\n        // this test is strictly for the sake of jest coverage\n        // todo: put browser testing on this, node has Object.assign\n        // todo: review browser support requirements\n        it(\"tests the polyfill for Object.assign\", () => {\n            expect(Object.hasOwnProperty(\"assign\")).toBe(true);\n            expect(typeof Object.assign).toEqual(\"function\");\n        })\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/index.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/schemas/default-pipe-vo.schema.js",
    "content": "export default {\n    $id: \"http://schemas.webfreshener.com/v1/pipe-vo#\",\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    oneOf: [\n        {\n            type: \"object\",\n        },\n        {\n            type: \"array\",\n        },\n        {\n            type: \"string\",\n        },\n        {\n            type: \"boolean\",\n        },\n        {\n            type: \"number\",\n        },\n    ]\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/schemas/default-pipe-vo.schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "src/schemas/pipe-args.schema.js",
    "content": "export default {\n    $id: \"http://schemas.webfreshener.com/v1/vxlib/pipe-args#\",\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    definitions: {\n        Config: {\n            $id: \"#/definitions/Config\",\n            type: \"object\",\n            allOf: [{\n                required: [\"schemas\"],\n                additionalProperties: false,\n                type: \"object\",\n                properties: {\n                    schemas: {\n                        $ref: \"#/definitions/Schemas\",\n                    },\n                    meta: {\n                        $ref: \"#/definitions/Schemas\",\n                    },\n                    use: {\n                        type: \"string\",\n                    },\n                },\n            }]\n        },\n        Schemas: {\n            $id: \"#/definitions/Schemas\",\n            type: \"array\",\n            items: {\n                allOf: [\n                    {\n                        type: \"object\"\n                    }, {\n                        $ref: \"#/definitions/Schema\",\n                    }\n                ]\n\n            },\n            minItems: 1,\n            maxItems: 2,\n        },\n        Schema: {\n            $id: \"#/definitions/Schema\",\n            type: \"object\",\n            properties: {\n                $id: {\n                    type: \"string\",\n                },\n                $schema: {\n                    type: \"string\",\n                },\n                type: {\n                    type: [\"string\", \"array\"],\n                },\n                exec: {\n                    not: {},\n                },\n                execute: {\n                    not: {},\n                },\n                iterate: {\n                    not: {},\n                },\n                loop: {\n                    not: {},\n                },\n                schemas: {\n                    not: {},\n                },\n                meta: {\n                    not: {},\n                },\n                use: {\n                    not: {},\n                },\n            },\n        },\n    },\n    anyOf: [\n        {$ref: \"#/definitions/Config\"},\n        {$ref: \"#/definitions/Schema\"},\n        {$ref: \"#/definitions/Schemas\"},\n    ],\n};\n",
    "static": true,
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/src/schemas/pipe-args.schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "Datamatic\n=============\nRxJS + JSON-Schema (Ajv) Based Observable and Validating Data Models and Pipelines\n\n[![Build Status](https://travis-ci.org/Webfreshener/datamatic.svg?branch=master)](https://travis-ci.org/Webfreshener/datamatic)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/49624d8edeec44e9af6fc484f8b414af)](https://www.codacy.com/gh/Webfreshener/datamatic/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Webfreshener/datamatic&amp;utm_campaign=Badge_Grade)\n[![Codacy Badge](https://app.codacy.com/project/badge/Coverage/49624d8edeec44e9af6fc484f8b414af)](https://www.codacy.com/gh/Webfreshener/datamatic/dashboard?utm_source=github.com&utm_medium=referral&utm_content=Webfreshener/datamatic&utm_campaign=Badge_Coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/f0bfbe06d67c3c489f4d/maintainability)](https://codeclimate.com/github/Webfreshener/datamatic/maintainability)\n\n[Online Developer Documentation](https://webfreshener.github.io/datamatic/)\n\n### Goals \n * Provide a means to quickly and easily validate complex data-sets\n * Look and feel like a standard JS Object for ease of use and adaptability\n * Automate data evaluation and transformation\n\n### Table of Contents\n\n**[Installation Instructions](#installation-instructions)**\n\n**[Usage Examples](#usage-examples)**\n   * [Basic Example](#basic-example)\n   * [Data Pipelines and Transformation](#data-pipelines-and-transformation)\n\n**[Developer Guide](#developer-guide)**\n  * [Model Class](#model-class)\n    * [Model Schemas Config](#model-schemas-config)\n    * [Model Proxy Object](#model-proxy-object)\n    * [model vs $model](#model-vs-&dollar;model)\n  * [ItemsModel](#itemsmodel)\n  * [PropertiesModel](#propertiesmodel)\n  * [BaseModel Class](#basemodel-class)\n  * [Pipeline Class](#pipeline-class)\n\n### Installation Instructions\n```\n$ npm install datamatic\n```\n\n#### UMD Usage (React, Angular, Vue et al)\n```\nimport * as datamatic from \"datamatic\";\n\n```\n\n#### CommonJS Usage for NodeJS\n```\nconst {Model, Pipeline} = require(\"datamatic\");\n\n```\n\n#### DOM Window Usage\n```\n    <script src=\"../../dist/datamatic.window.js\"></script>\n    <script language=\"JavaScript\">\n        const {Model, Pipeline} = window.datamatic;\n    </script>\n```\n\n\n\n### Usage Examples\n\n#### Basic Example\nThe example below defines a Model that expects a `name` value and \nlist of `topScores` items\n\n```\nconst {Model} = require(\"datamatic\");\n\n// JSON-SCHEMA for Scores Collection\nconst schema = {\n    \"id\": \"root#\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n        },\n        \"topScores\": {\n            \"type\": \"array\",\n            \"minItems\": 1,\n            \"maxItems\": 3,\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"score\": {\n                        \"type\": \"integer\",\n                        \"default\": 0\n                    }\n                },\n                \"required\": [\"name\"]\n            }\n        }\n    },\n    required: [\"name\", \"topScores\"],\n};\n\n\n// instantiate our Model\nconst obj = new Model({schemas: [schema]});\n\n// subscribes an observer to the Model\nobj.subscribe({\n    next: function (ref) {\n        console.log(\"\\t>> update succeeded!\\n\\t%s\\n\\t%s\\n\\n\",\n            \"current object state:\", \"\" + JSON.stringify(ref));\n    },\n    complete: function (ref) {\n        console.log(\"\\t>> %s\",\n            \"object is frozen and no longer editable\");\n    },\n    error: function (e) {\n        console.log(\"\\t>> update FAILED with error:\\n\\t%s\\n\",\n            JSON.stringify(e));\n        console.log(\"\\tcurrent object state:\\n\\t%s\\n\", obj);\n    },\n});\n\n// populate the Model with data\n// -- this will trigger the \"next\" notification\nobj.model = {\n    name: \"JSONville\",\n    topScores: [{\n        name: \"Player 1\",\n        score: 12300000,\n    }, {\n        name: \"Player 2\",\n        score: 45600000,\n    }, {\n        name: \"Player 3\",\n        score: 78900000,\n    }]\n};\n\n// update the model\n// this will trigger the next notification\nobj.model.topScores[0].score++;\n\n// invalid attempt update the model\n// this will trigger the error notification\n// reason: \"topScores/items/score\" is type is integer \nobj.model.topScores[0].score = \"1234\";\n\n// invalid attempt update the model\n// this will trigger the error notification\n// reason: \"topScores\" is marked as required\ndelete obj.model.topScores;\n\n```\nRefer to the examples demo in `./examples/basic-usage` for more usage examples\n\n#### Data Pipelines and Transformation ####\n```\nconst {Pipeline} = require(\"datamatic\");\n\n/*\n    defines a schema that requires name, age and active attributes\n    filters out all items that do not conform to JSON-Schema below\n */\nconst schema = {\n    type: \"object\",\n    required: [\"name\", \"age\", \"active\"],\n    properties: {\n        name: {\n            $comment: \"names must be in form: First Middle|MI Last\",\n            type: \"string\",\n            pattern: \"^[a-zA-Z]{1,24}\\\\s?[a-zA-Z]?\\\\s+[a-zA-Z]{1,24}$\",\n        },\n        age: {\n            $comment: \"age must be a number equal to or higher than 21 and lower than 100\",\n            type: \"number\",\n            minimum: 21,\n            maximum: 100,\n        },\n        active: {\n            $comment: \"active must equal true\",\n            type: \"boolean\",\n            const: true,\n        },\n    },\n};\n\n\nconst pipeline = new Pipeline(\n    [\n        // By nesting an item schema within an iterator, the schema is applied as a filter\n        schema,\n        // the list can go on ...\n    ],\n    // the list can go on ...\n);\n\npipeline.subscribe({\n    // should only contain active people who are 21 and over and name pattern match\n    next: (d) => console.log(`\\nfiltered results:\\n${JSON.stringify(d)}`),\n    // it should not encounter an error unless it is critical, so full stop\n    error: (e) => console.error(`\\ngot error:\\n${JSON.stringify(e)}`),\n});\n\npipeline.write([\n    {name: \"Alice Dodson\", age: 30, active: false}, // will be filtered because of active status\n    {name: \"Jim-Bob\", age: 21, active: true}, // will be filtered because of name format\n    {name: \"Bob Roberts\", age: 38, active: true}, // will pass\n    {name: \"Chris Appleton\", age: 19, active: true}, // will be filtered because of age\n    {name: \"Fred Franks\", age: 20, active: true}, // will be filtered because of age\n    {name: \"Sam Smith\", age: 25, active: true}, // will pass\n    {name: \"\", active: null}, // will be filtered because of invalid object format\n]);\n```\n\n## Developer Guide\n\n#### Model Class ####\nThis class represents the Document entry point\n\n| Method        | Arguments | Description  |\n|:--------------|:----------|:-------|\n| constructor   | [schemas config](#model-schemas-config) (object), [options (object)] | creates new Model instance |\n| errors [getter]   | | retrieves errors (if any) from last json-schema validation |\n| model [getter/setter]   | | retrieves root [model proxy object](#model-proxy-object) for operation |\n| getModelsInPath   | to (string) | retrieves models at given path |\n| getSchemaForKey   | key (string) | retrieves json-schema with given key as ID |\n| getSchemaForPath   | path (string) | retrieves json-schema for model at given path |\n| schema [getter]   | | retrieves json-schema for root model |\n| subscribe   |  observers (object) | Subscribes Observers to the Model Model Root |\n| subscribeTo   |  path (string), observers (object) | Subscribes Observers to the Model at path \n| toString   | | retrieves root model as JSON String |\n| toJSON   | | retrieves root model as JSON Object |\n| validate   | path (string), value (object) | validates data at given ath against JSON-Schema |\n| *static* fromJSON   | json (string &#124; object) | creates new Model from static method |\n\n##### Model Schemas Config\n| Property        | Type | Description  |\n|:--------------|:----------|:-------|\n| meta | array | Array of MetaSchema references to validate Schemas against\n| schemas | array | Array of Schema references to validate data against \n| use | string | key/id of schema to use for data validation\n\n##### Model Proxy Object \n\nThis is the Data Model most usage will be based around.\nIt is a Proxy Object that has traps for all operations that alter the state of the given Array or Object\n\n| Property        | Type | Description  |\n|:--------------|:----------|:-------|\n| $model | (PropertiesModel &#124; ItemsModel) | references Proxy Object owner class\n\n##### model vs $model \n\nIn usage, `model` always references the Proxied Data Model for validation and operation where `$model` references the owner Model Class\n\n*example:*\n```\n const _owner = new Model({schemas: [schema]});\n \n // access the root model:\n console.log(`JSON.stringify(_owner.model)`);\n \n // access the model's owner Model Class:\n const owner = _owner.model.$model;\n console.log(`is frozen: ${owner.isFrozen}`);\n \n // call toString on Owner\n console.log(`stringified: ${owner}`);\n \n // obtain model from  it's Owner\n console.log(`stringified: ${JSON.stringify(owner.model)}`);\n \n```\n\n#### ItemsModel ####\n###### subclass of [Model Class](#model-class)\n\nRepresents an Items (Array) entry in the given schema\nNote: the `model` param presents a Proxied Array, with all `Array.prototype` methods trapped and validatable\n\n| Method        | Arguments | Description  |\n|:--------------|:----------|:-------|\n| model [getter/setter]   | | setter/getter for [model proxy object](#model-proxy-object) for operation |\n\n#### PropertiesModel ####\n###### subclass of [Model Class](#model-class)\n\nRepresents an Properties (Object} entry in the given schema\n\n| Method        | Arguments | Description  |\n|:--------------|:----------|:-------|\n| get | key (string) | applies Object.freeze to model hierarchy |\n| model [getter/setter]   | | setter/getter for [model proxy object](#model-proxy-object) for operation |\n| set | key (string), value (any) | applies Object.freeze to model hierarchy |\n\n\n#### BaseModel Class ####\n| Method        | Arguments | Description  |\n|:--------------|:----------|:-------|\n| freeze | | applies Object.freeze to model hierarchy |\n| isDirty [getter]   | | returns dirtyness of model heirarchy (is dirty if operation in progress) |\n| isFrozen [getter]   | | returns Object.freeze status of Model hierarchy |\n| jsonPath [getter]   | | retrieves json path string for Model instance. eg: \"this.is.my.path\" |\n| objectID [getter]   | | retrieves Unique ObjectID of Model instance |\n| options [getter]   | | retrieves options passed to Model instance |\n| path [getter]   | | retrieves json-schema path string for Model instance. eg: \"#/this/is/my/path\" |\n| parent [getter]   | | retrieves Model's parent Model instance |\n| pipeline | ...(pipes &#124; schemas) | returns Pipeline instance for operating on model |\n| reset | | resets model to initial state if operation is valid |\n| root [getter]   | | retrieves root Model instance |\n| model [getter]   | | retrieves Model's internal Model Document instance |\n| subscribe   |  observers (object) | Subscribes Observers to the Model Model Root |\n| subscribeTo   |  path (string), observers (object) | Subscribes Observers to the Model at path |\n| toString   | | retrieves root model as JSON String |\n| toJSON   | | retrieves root model as JSON Object |\n| validate   | path (string), value (object) | validates data at given ath against JSON-Schema |\n| validationPath [getter] | | retrieves json-schema path string for Model validation |\n\n#### Pipeline Class ####\n| Method        | Arguments | Description  |\n|:--------------|:----------|:-------|\n| constructor | ...pipesOrSchemas | class constructor method |\n| errors [getter]   | | retrieves errors (if any) from last json-schema validation |\n| exec | data (object &#124; array &#124; string &#124; number &#124; boolean)| executes pipeline's callback with data without writing to `pipeline` |\n| subscribe | handler (object &#124; function &#124; schema &#124; array)| subscribes to `pipeline` output notifications |\n| toJSON | | Provides current state of `pipeline` output as JSON |\n| toString | | Provides current state of `pipeline` output as JSON string |\n| clone | | returns clone of current `pipeline` segment |\n| close | | terminates input on `pipeline` segment |\n| writable [getter] | | Returns write status of `pipeline` |\n| link | target (Pipeline), ...pipesOrSchemas | links `pipeline` segment to direct output to target `pipeline` |\n| merge | ...(pipes &#124; schemas) | merges multiple pipes into single output |\n| once | | informs `pipeline` to close after first notification |\n| pipeline | ...(pipes &#124; schemas) | returns new chained `pipeline` segment |\n| sample | nth | Returns product of Nth occurrence of `pipeline` execution |\n| split | ...(pipes &#124; schemas) | creates array of new `pipeline` segments that run in parallel |\n| tap | | Provides current state of `pipeline` output. alias for `toJSON` |\n| throttle | rate (number) | Limit notifications to rate based on time interval |\n| unthrottle | discardCacheQueue (boolean) | Clears throttle interval. Optionally discards contents of `Pipeline` cache |\n| unlink | target (Pipeline)| unlinks `pipeline` segment from target `pipeline` |\n| write | data (object &#124; array &#124; string &#124; number &#124; boolean)| writes data to `pipeline` |\n\n",
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"datamatic\",\n  \"description\": \"RxJS + JSON-Schema (Ajv) Based Observable and Validating Data Models and Pipelines\",\n  \"homepage\": \"https://webfreshener.github.io/datamatic\",\n  \"author\": \"Van Schroeder <van@webfreshener.com>\",\n  \"version\": \"0.9.10\",\n  \"main\": \"./dist/datamatic.node.js\",\n  \"module\": \"./dist/datamatic.umd.js\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Webfreshener/datamatic.git\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"clear-tests\": \"jest --clearCache\",\n    \"cover\": \"jest --coverage && cat ./coverage/lcov.info | codacy-coverage --token \\\"$CODACY_PROJECT_TOKEN\\\"\",\n    \"build-test\": \"webpack --mode development; npm test\",\n    \"build\": \"webpack --mode production\",\n    \"docs\": \"./node_modules/.bin/esdoc\",\n    \"report\": \"$HOME/Library/Caches/Codacy/coverage-reporter/11.9.2/codacy-coverage-reporter report\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"dist/*\"\n  ],\n  \"keywords\": [\n    \"rxjs\",\n    \"ajv\",\n    \"json-schema\",\n    \"validation\",\n    \"validatable\",\n    \"observable\",\n    \"proxy\",\n    \"model\",\n    \"json\",\n    \"data\",\n    \"object\",\n    \"array\",\n    \"hash\",\n    \"filter\",\n    \"map\",\n    \"dictionary\"\n  ],\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.15.7\",\n    \"@babel/core\": \"^7.15.8\",\n    \"@babel/plugin-transform-runtime\": \"^7.15.8\",\n    \"@babel/preset-env\": \"^7.15.8\",\n    \"@babel/preset-react\": \"^7.14.5\",\n    \"@babel/runtime\": \"^7.15.4\",\n    \"@webpack-cli/init\": \"^1.1.3\",\n    \"ajv\": \"^8.6.3\",\n    \"ajv-formats\": \"^2.1.1\",\n    \"babel-loader\": \"^8.2.2\",\n    \"chai\": \"^4.3.4\",\n    \"codacy-coverage\": \"^3.4.0\",\n    \"deep-equal\": \"^2.0.5\",\n    \"es6-weak-map\": \"^2.0.3\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-accessor-plugin\": \"^1.0.0\",\n    \"esdoc-exclude-source-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jest\": \"^27.2.5\",\n    \"jest-babel-istanbul\": \"^0.1.0\",\n    \"jest-each\": \"^27.2.5\",\n    \"jshint\": \"^2.13.1\",\n    \"json-schema-migrate\": \"^2.0.0\",\n    \"jsonpath\": \"^1.1.1\",\n    \"lodash.merge\": \"^4.6.2\",\n    \"mocha\": \"^9.1.3\",\n    \"mocha-lcov-reporter\": \"^1.3.0\",\n    \"object.assign\": \"^4.1.2\",\n    \"rxjs\": \"^7.4.0\",\n    \"rxjs-compat\": \"^6.6.7\",\n    \"weakmap\": \"^0.0.6\",\n    \"webpack\": \"^5.58.2\",\n    \"webpack-cli\": \"^4.9.0\",\n    \"webpack-rxjs-externals\": \"^2.0.0\"\n  },\n  \"jest\": {\n    \"collectCoverage\": true,\n    \"testPathIgnorePatterns\": [\n      \"/integration/\"\n    ],\n    \"coveragePathIgnorePatterns\": [\n      \"/node_modules/\",\n      \"/dist/\",\n      \"/integration/\"\n    ]\n  }\n}\n",
    "longname": "/Users/vanschroeder/IdeaProjects/webfreshener-datamatic/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]